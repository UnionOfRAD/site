<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\data\source\database\adapter\Sqlite3 – Framework API v1.0.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.0.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.0.x/lithium/data" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">data</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.0.x/lithium/data/source" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">source</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<a href="/docs/api/lithium/1.0.x/lithium/data/source/database" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">database</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="7" />
							<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">adapter</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="8" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Sqlite3</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::__construct()">__construct()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::enabled()">enabled()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::connect()">connect()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::disconnect()">disconnect()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::sources()">sources()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::describe()">describe()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::_insertId()">_insertId()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::encoding()">encoding()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::error()">error()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::_execute()">_execute()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::_column()">_column()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::_buildColumn()">_buildColumn()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_init()">_init()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::name()">name()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_splitFieldname()">_splitFieldname()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_fieldName()">_fieldName()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::value()">value()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_cast()">_cast()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_formatters()">_formatters()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::create()">create()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::read()">read()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_queryExport()">_queryExport()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::update()">update()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::delete()">delete()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::calculation()">calculation()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::relationship()">relationship()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::methods()">methods()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::renderCommand()">renderCommand()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::schema()">schema()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_schema()">_schema()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::conditions()">conditions()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::having()">having()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_conditions()">_conditions()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_processConditions()">_processConditions()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_processOperator()">_processOperator()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::fields()">fields()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_fields()">_fields()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_fieldsQuote()">_fieldsQuote()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_fieldsReturn()">_fieldsReturn()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_createFields()">_createFields()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_updateFields()">_updateFields()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::limit()">limit()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::joins()">joins()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::constraints()">constraints()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_constraints()">_constraints()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::order()">order()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::group()">group()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::comment()">comment()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::alias()">alias()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::cast()">cast()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_operator()">_operator()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_entityName()">_entityName()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_introspectType()">_introspectType()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_toBoolean()">_toBoolean()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_error()">_error()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::applyStrategy()">applyStrategy()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::join()">join()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_aliasing()">_aliasing()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::on()">on()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_on()">_on()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_meta()">_meta()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_constraint()">_constraint()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::createSchema()">createSchema()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_buildMetas()">_buildMetas()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::_buildConstraints()">_buildConstraints()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::dropSchema()">dropSchema()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::column()">column()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::__destruct()">__destruct()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::isConnected()">isConnected()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::configureClass()">configureClass()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::relationFieldName()">relationFieldName()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::applyFilter()">applyFilter()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::invokeMethod()">invokeMethod()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::__set_state()">__set_state()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::respondsTo()">respondsTo()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_instance()">_instance()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_filter()">_filter()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_parents()">_parents()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_stop()">_stop()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::$_quotes">$_quotes</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::$_columns">$_columns</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::$_metas">$_metas</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::$_constraints">$_constraints</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::$_regex">$_regex</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$connection">$connection</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$_strings">$_strings</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$_classes">$_classes</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$_operators">$_operators</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$_constraintTypes">$_constraintTypes</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$_strategies">$_strategies</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database::$_cachedNames">$_cachedNames</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::$_autoConfig">$_autoConfig</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::$_isConnected">$_isConnected</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/data/Source::$_cachedMethods">$_cachedMethods</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_config">$_config</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_methodFilters">$_methodFilters</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_parents">$_parents</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.0.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.0.x/lithium/data" class="symbol-segment">data</a>\<a href="/docs/api/lithium/1.0.x/lithium/data/source" class="symbol-segment">source</a>\<a href="/docs/api/lithium/1.0.x/lithium/data/source/database" class="symbol-segment">database</a>\<a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter" class="symbol-segment">adapter</a>\Sqlite3		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.0.x/lithium/data/source/Database" class="extends__symbol">lithium\data\source\Database</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Sqlite (3) database driver. Extends the <code>Database</code> class to implement the necessary
SQL-formatting and resultset-fetching features for working with Sqlite databases.</p>
					</div>
				
									<div class="description">
						<ul>
<li>Implements support for file based and in-memory databases.</li>
</ul>
<p>For more information on configuring the database connection, see
the <code>__construct()</code> method.</p>
					</div>
							</section>

			
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/1.0.x/lithium/data/source/database/adapter/Sqlite3::__construct()">lithium\data\source\database\adapter\Sqlite3::__construct()</a>								</ul>
			</section>
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class Sqlite3 extends \lithium\data\source\Database {

	/**
	 * Pair of opening and closing quote characters used for quoting identifiers in queries.
	 *
	 * @link http://www.sqlite.org/lang_keywords.html
	 * @var array
	 */
	protected $_quotes = array(&#039;&quot;&#039;, &#039;&quot;&#039;);

	/**
	 * Sqlite3 column type definitions.
	 *
	 * @var array
	 */
	protected $_columns = array(
		&#039;id&#039; =&gt; array(&#039;use&#039; =&gt; &#039;integer&#039;),
		&#039;string&#039; =&gt; array(&#039;use&#039; =&gt; &#039;varchar&#039;, &#039;length&#039; =&gt; 255),
		&#039;text&#039; =&gt; array(&#039;use&#039; =&gt; &#039;text&#039;),
		&#039;integer&#039; =&gt; array(&#039;use&#039; =&gt; &#039;integer&#039;, &#039;formatter&#039; =&gt; &#039;intval&#039;),
		&#039;float&#039; =&gt; array(&#039;use&#039; =&gt; &#039;real&#039;, &#039;formatter&#039; =&gt; &#039;floatval&#039;),
		&#039;datetime&#039; =&gt; array(&#039;use&#039; =&gt; &#039;text&#039;, &#039;format&#039; =&gt; &#039;Y-m-d H:i:s&#039;),
		&#039;timestamp&#039; =&gt; array(&#039;use&#039; =&gt; &#039;text&#039;, &#039;format&#039; =&gt; &#039;Y-m-d H:i:s&#039;),
		&#039;time&#039; =&gt; array(&#039;use&#039; =&gt; &#039;text&#039;, &#039;format&#039; =&gt; &#039;H:i:s&#039;, &#039;formatter&#039; =&gt; &#039;date&#039;),
		&#039;date&#039; =&gt; array(&#039;use&#039; =&gt; &#039;text&#039;, &#039;format&#039; =&gt; &#039;Y-m-d&#039;, &#039;formatter&#039; =&gt; &#039;date&#039;),
		&#039;binary&#039; =&gt; array(&#039;use&#039; =&gt; &#039;blob&#039;),
		&#039;boolean&#039; =&gt; array(&#039;use&#039; =&gt; &#039;boolean&#039;, &#039;length&#039; =&gt; 1)
	);

	/**
	 * Column specific metas used on table creating
	 * By default `&#039;quote&#039;` is false and &#039;join&#039; is `&#039; &#039;`
	 *
	 * @var array
	 */
	protected $_metas = array(
		&#039;column&#039; =&gt; array(
			&#039;collate&#039; =&gt; array(&#039;keyword&#039; =&gt; &#039;COLLATE&#039;, &#039;escape&#039; =&gt; true)
		)
	);
	/**
	 * Column contraints
	 *
	 * @var array
	 */
	protected $_constraints = array(
		&#039;primary&#039; =&gt; array(&#039;template&#039; =&gt; &#039;PRIMARY KEY ({:column})&#039;),
		&#039;foreign_key&#039; =&gt; array(
			&#039;template&#039; =&gt; &#039;FOREIGN KEY ({:column}) REFERENCES {:to} ({:toColumn}) {:on}&#039;
		),
		&#039;unique&#039; =&gt; array(
			&#039;template&#039; =&gt; &#039;UNIQUE {:index} ({:column})&#039;
		),
		&#039;check&#039; =&gt; array(&#039;template&#039; =&gt; &#039;CHECK ({:expr})&#039;)
	);

	/**
	 * Holds commonly regular expressions used in this class.
	 *
	 * @see lithium\data\source\database\adapter\Sqlite3::describe()
	 * @see lithium\data\source\database\adapter\Sqlite3::_column()
	 * @var array
	 */
	protected $_regex = array(
		&#039;column&#039; =&gt; &#039;(?P&lt;type&gt;[^(]+)(?:\((?P&lt;length&gt;[^)]+)\))?&#039;
	);

	/**
	 * Constructor.
	 *
	 * @see lithium\data\source\Database::__construct()
	 * @see lithium\data\Source::__construct()
	 * @see lithium\data\Connections::add()
	 * @param array $config The available configuration options are the following. Further
	 *        options are inherited from the parent classes. Typically, these parameters are
	 *        set in `Connections::add()`, when adding the adapter to the list of active
	 *        connections.
	 *        - `&#039;database&#039;` _string_: Defaults to in-memory database `&#039;:memory:&#039;`.
	 * @return void
	 */
	public function __construct(array $config = array()) {
		$defaults = array(&#039;database&#039; =&gt; &#039;:memory:&#039;);
		parent::__construct($config + $defaults);
	}

	/**
	 * Check for required PHP extension, or supported database feature.
	 *
	 * @param string $feature Test for support for a specific feature, i.e. `&#039;transactions&#039;`.
	 * @return boolean Returns `true` if the particular feature (or if Sqlite) support is enabled,
	 *         otherwise `false`.
	 */
	public static function enabled($feature = null) {
		if (!$feature) {
			return extension_loaded(&#039;pdo_sqlite&#039;);
		}
		$features = array(
			&#039;arrays&#039; =&gt; false,
			&#039;transactions&#039; =&gt; false,
			&#039;booleans&#039; =&gt; true,
			&#039;schema&#039; =&gt; true,
			&#039;relationships&#039; =&gt; true,
			&#039;sources&#039; =&gt; true
		);
		return isset($features[$feature]) ? $features[$feature] : null;
	}

	/**
	 * Connects to the database by constructing DSN string and creating a PDO intance using
	 * the parent class. Will set specific options on the connection as provided.
	 *
	 * @return boolean Returns `true` if a database connection could be established,
	 *         otherwise `false`.
	 */
	public function connect() {
		if (!$this-&gt;_config[&#039;database&#039;]) {
			throw new ConfigException(&#039;No Database configured&#039;);
		}

		if (empty($this-&gt;_config[&#039;dsn&#039;])) {
			$this-&gt;_config[&#039;dsn&#039;] = sprintf(&quot;sqlite:%s&quot;, $this-&gt;_config[&#039;database&#039;]);
		}

		return parent::connect();
	}

	/**
	 * Disconnects the adapter from the database.
	 *
	 * @return boolean True on success, else false.
	 */
	public function disconnect() {
		if ($this-&gt;_isConnected) {
			unset($this-&gt;connection);
			$this-&gt;_isConnected = false;
		}
		return true;
	}

	/**
	 * Returns the list of tables in the currently-connected database.
	 *
	 * @param string $model The fully-name-spaced class name of the model object making the request.
	 * @return array Returns an array of objects to which models can connect.
	 * @filter
	 */
	public function sources($model = null) {
		$config = $this-&gt;_config;

		return $this-&gt;_filter(__METHOD__, compact(&#039;model&#039;), function($self, $params) use ($config) {
			$sql = &quot;SELECT name FROM sqlite_master WHERE type=&#039;table&#039; ORDER BY name;&quot;;
			$result = $self-&gt;invokeMethod(&#039;_execute&#039;, array($sql));
			$sources = array();

			foreach ($result as $row) {
				$sources[] = $row[0];
			}
			return $sources;
		});
	}

	/**
	 * Gets the column schema for a given Sqlite3 table.
	 *
	 * A column type may not always be available, i.e. when during creation of
	 * the column no type was declared. Those columns are internally treated
	 * by SQLite3 as having a `NONE` affinity. The final schema will contain no
	 * information about type and length of such columns (both values will be
	 * `null`).
	 *
	 * @param mixed $entity Specifies the table name for which the schema should be returned, or
	 *        the class name of the model object requesting the schema, in which case the model
	 *        class will be queried for the correct table name.
	 * @param array $fields Any schema data pre-defined by the model.
	 * @param array $meta
	 * @return array Returns an associative array describing the given table&#039;s schema, where the
	 *         array keys are the available fields, and the values are arrays describing each
	 *         field, containing the following keys:
	 *         - `&#039;type&#039;`: The field type name
	 * @filter
	 */
	public function describe($entity, $fields = array(), array $meta = array()) {
		$params = compact(&#039;entity&#039;, &#039;meta&#039;, &#039;fields&#039;);
		$regex = $this-&gt;_regex;
		return $this-&gt;_filter(__METHOD__, $params, function($self, $params) use ($regex) {
			extract($params);

			if ($fields) {
				return $self-&gt;invokeMethod(&#039;_instance&#039;, array(&#039;schema&#039;, compact(&#039;fields&#039;)));
			}
			$name = $self-&gt;invokeMethod(&#039;_entityName&#039;, array($entity, array(&#039;quoted&#039; =&gt; true)));
			$columns = $self-&gt;read(&quot;PRAGMA table_info({$name})&quot;, array(&#039;return&#039; =&gt; &#039;array&#039;));
			$fields = array();

			foreach ($columns as $column) {
				$schema = $self-&gt;invokeMethod(&#039;_column&#039;, array($column[&#039;type&#039;]));
				$default = $column[&#039;dflt_value&#039;];

				if (preg_match(&quot;/^&#039;(.*)&#039;/&quot;, $default, $match)) {
					$default = $match[1];
				} elseif ($schema[&#039;type&#039;] === &#039;boolean&#039;) {
					$default = !!$default;
				} else {
					$default = null;
				}
				$fields[$column[&#039;name&#039;]] = $schema + array(
					&#039;null&#039; =&gt; $column[&#039;notnull&#039;] === &#039;1&#039;,
					&#039;default&#039; =&gt; $default
				);
			}
			return $self-&gt;invokeMethod(&#039;_instance&#039;, array(&#039;schema&#039;, compact(&#039;fields&#039;)));
		});
	}

	/**
	 * Gets the last auto-generated ID from the query that inserted a new record.
	 *
	 * @param object $query The `Query` object associated with the query which generated
	 * @return mixed Returns the last inserted ID key for an auto-increment column or a column
	 *         bound to a sequence.
	 */
	protected function _insertId($query) {
		return $this-&gt;connection-&gt;lastInsertId();
	}

	/**
	 * Gets or sets the encoding for the connection.
	 *
	 * @param string $encoding If setting the encoding, this is the name of the encoding to set,
	 *               i.e. `&#039;utf8&#039;` or `&#039;UTF-8&#039;` (both formats are valid).
	 * @return mixed If setting the encoding; returns `true` on success, or `false` on
	 *         failure. When getting, returns the encoding as a string.
	 */
	public function encoding($encoding = null) {
		$encodingMap = array(&#039;UTF-8&#039; =&gt; &#039;utf8&#039;);

		if (!$encoding) {
			$query = $this-&gt;connection-&gt;query(&#039;PRAGMA encoding&#039;);
			$encoding = $query-&gt;fetchColumn();
			return ($key = array_search($encoding, $encodingMap)) ? $key : $encoding;
		}
		$encoding = isset($encodingMap[$encoding]) ? $encodingMap[$encoding] : $encoding;

		try {
			$this-&gt;connection-&gt;exec(&quot;PRAGMA encoding = \&quot;{$encoding}\&quot;&quot;);
			return true;
		} catch (PDOException $e) {
			return false;
		}
	}

	/**
	 * Retrieves database error message and error code.
	 *
	 * @return array
	 */
	public function error() {
		if ($error = $this-&gt;connection-&gt;errorInfo()) {
			return array($error[1], $error[2]);
		}
	}

	/**
	 * Execute a given query.
	 *
	 * @see lithium\data\source\Database::renderCommand()
	 * @param string $sql The sql string to execute
	 * @param array $options No available options.
	 * @return \lithium\data\source\Result Returns a result object if the query was successful.
	 * @filter
	 */
	protected function _execute($sql, array $options = array()) {
		$conn = $this-&gt;connection;
		$params = compact(&#039;sql&#039;, &#039;options&#039;);

		return $this-&gt;_filter(__METHOD__, $params, function($self, $params) use ($conn) {
			$sql = $params[&#039;sql&#039;];

			try {
				$resource = $conn-&gt;query($sql);
			} catch (PDOException $e) {
				$self-&gt;invokeMethod(&#039;_error&#039;, array($sql));
			};
			return $self-&gt;invokeMethod(&#039;_instance&#039;, array(&#039;result&#039;, compact(&#039;resource&#039;)));
		});
	}

	/**
	 * Converts database-layer column types to basic types.
	 *
	 * @param string $real Real database-layer column type (i.e. &quot;varchar(255)&quot;)
	 * @return string Abstract column type (i.e. &quot;string&quot;)
	 */
	protected function _column($real) {
		if (is_array($real)) {
			return $real[&#039;type&#039;] . (isset($real[&#039;length&#039;]) ? &quot;({$real[&#039;length&#039;]})&quot; : &#039;&#039;);
		}

		if (!preg_match(&quot;/{$this-&gt;_regex[&#039;column&#039;]}/&quot;, $real, $column)) {
			return $real;
		}

		$column = array_intersect_key($column, array(&#039;type&#039; =&gt; null, &#039;length&#039; =&gt; null));
		if (isset($column[&#039;length&#039;]) &amp;&amp; $column[&#039;length&#039;]) {
			$length = explode(&#039;,&#039;, $column[&#039;length&#039;]) + array(null, null);
			$column[&#039;length&#039;] = $length[0] ? (integer) $length[0] : null;
			$length[1] ? $column[&#039;precision&#039;] = (integer) $length[1] : null;
		}

		switch (true) {
			case in_array($column[&#039;type&#039;], array(&#039;date&#039;, &#039;time&#039;, &#039;datetime&#039;, &#039;timestamp&#039;)):
				return $column;
			case ($column[&#039;type&#039;] === &#039;tinyint&#039; &amp;&amp; $column[&#039;length&#039;] == &#039;1&#039;):
			case ($column[&#039;type&#039;] === &#039;boolean&#039;):
				return array(&#039;type&#039; =&gt; &#039;boolean&#039;);
			break;
			case (strpos($column[&#039;type&#039;], &#039;int&#039;) !== false):
				$column[&#039;type&#039;] = &#039;integer&#039;;
			break;
			case (strpos($column[&#039;type&#039;], &#039;char&#039;) !== false):
				$column[&#039;type&#039;] = &#039;string&#039;;
				$column[&#039;length&#039;] = 255;
			break;
			case (strpos($column[&#039;type&#039;], &#039;text&#039;) !== false):
				$column[&#039;type&#039;] = &#039;text&#039;;
			break;
			case (strpos($column[&#039;type&#039;], &#039;blob&#039;) !== false || $column[&#039;type&#039;] === &#039;binary&#039;):
				$column[&#039;type&#039;] = &#039;binary&#039;;
			break;
			case preg_match(&#039;/real|float|double|decimal/&#039;, $column[&#039;type&#039;]):
				$column[&#039;type&#039;] = &#039;float&#039;;
			break;
			default:
				$column[&#039;type&#039;] = &#039;text&#039;;
			break;
		}
		return $column;
	}

	/**
	 * Helper for `Database::column()`.
	 *
	 * @see lithium\data\Database::column()
	 * @param array $field A field array.
	 * @return string SQL column string.
	 */
	protected function _buildColumn($field) {
		extract($field);

		if ($type === &#039;float&#039; &amp;&amp; $precision) {
			$use = &#039;numeric&#039;;
		}

		$out = $this-&gt;name($name) . &#039; &#039; . $use;

		$allowPrecision = preg_match(&#039;/^(integer|real|numeric)$/&#039;,$use);
		$precision = ($precision &amp;&amp; $allowPrecision) ? &quot;,{$precision}&quot; : &#039;&#039;;

		if ($length &amp;&amp; ($allowPrecision || $use === &#039;text&#039;)) {
			$out .= &quot;({$length}{$precision})&quot;;
		}

		$out .= $this-&gt;_buildMetas(&#039;column&#039;, $field, array(&#039;collate&#039;));

		if ($type !== &#039;id&#039;) {
			$out .= is_bool($null) ? ($null ? &#039; NULL&#039; : &#039; NOT NULL&#039;) : &#039;&#039; ;
			$out .= $default ? &#039; DEFAULT &#039; . $this-&gt;value($default, $field) : &#039;&#039;;
		}

		return $out;
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
