<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\test\Mocker::$_mockIngredients – Framework API v1.1.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.1.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.1.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.1.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.1.x/lithium/test" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">test</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.1.x/lithium/test/Mocker" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Mocker</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">$_mockIngredients</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.1.x/lithium/test/Mocker" rel="up">../</a>		</ul>
	
													
										</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.1.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.1.x/lithium/test" class="symbol-segment">test</a>\<a href="/docs/api/lithium/1.1.x/lithium/test/Mocker" class="symbol-segment">Mocker</a>::$_mockIngredients		</h1>

		<section class="under">
															<div class="tags">
													<span class="tag protected">protected</span>
													<span class="tag">static</span>
								<span class="tag">property</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>A list of code to be generated for the <code>Mock</code>.</p>
					</div>
				
									<div class="description">
						<p>The Mock class directly extends the class you wish to mock but only
interacts with the <code>Delegate</code> directly. This class is the public
interface for users.</p>
					</div>
							</section>

			
			
			
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">	protected static $_mockIngredients = [
		&#039;startClass&#039; =&gt; [
			&#039;namespace {:namespace};&#039;,
			&#039;use lithium\aop\Filters as _Filters;&#039;,
			&#039;class Mock extends \{:mocker} {&#039;,
			&#039;    public $mocker;&#039;,
			&#039;    public $results = [];&#039;,
			&#039;    public static $staticResults = [];&#039;,
			&#039;    protected $_safeVars = [&#039;,
			&#039;        &quot;_classes&quot;,&#039;,
			&#039;        &quot;mocker&quot;,&#039;,
			&#039;        &quot;_safeVars&quot;,&#039;,
			&#039;        &quot;results&quot;,&#039;,
			&#039;        &quot;staticResults&quot;,&#039;,
			&#039;        &quot;_methodFilters&quot;,&#039;,
			&#039;    ];&#039;,
		],
		&#039;get&#039; =&gt; [
			&#039;public function {:reference}__get($name) {&#039;,
			&#039;    $data ={:reference} $this-&gt;mocker-&gt;$name;&#039;,
			&#039;    return $data;&#039;,
			&#039;}&#039;,
		],
		&#039;set&#039; =&gt; [
			&#039;public function __set($name, $value = null) {&#039;,
			&#039;    return $this-&gt;mocker-&gt;$name = $value;&#039;,
			&#039;}&#039;,
		],
		&#039;isset&#039; =&gt; [
			&#039;public function __isset($name) {&#039;,
			&#039;    return isset($this-&gt;mocker-&gt;$name);&#039;,
			&#039;}&#039;,
		],
		&#039;unset&#039; =&gt; [
			&#039;public function __unset($name) {&#039;,
			&#039;    unset($this-&gt;mocker-&gt;$name);&#039;,
			&#039;}&#039;,
		],
		&#039;constructor&#039; =&gt; [
			&#039;{:modifiers} function __construct({:args}) {&#039;,
			&#039;    $args = compact({:stringArgs});&#039;,
			&#039;    array_push($args, $this);&#039;,
			&#039;    foreach (get_class_vars(get_class($this)) as $key =&gt; $value) {&#039;,
			&#039;        if (isset($this-&gt;{$key}) &amp;&amp; !in_array($key, $this-&gt;_safeVars)) {&#039;,
			&#039;            unset($this-&gt;$key);&#039;,
			&#039;        }&#039;,
			&#039;    }&#039;,
			&#039;    $class = new \ReflectionClass(\&#039;{:namespace}\MockDelegate\&#039;);&#039;,
			&#039;    $class-&gt;newInstanceArgs($args);&#039;,
			&#039;}&#039;,
		],
		&#039;destructor&#039; =&gt; [
			&#039;public function __destruct() {}&#039;,
		],
		&#039;staticMethod&#039; =&gt; [
			&#039;{:modifiers} function {:method}({:args}) {&#039;,
			&#039;    $args = compact({:stringArgs});&#039;,
			&#039;    $args[&quot;hash&quot;] = &quot;1f3870be274f6c49b3e31a0c6728957f&quot;;&#039;,
			&#039;    $method = \&#039;{:namespace}\MockDelegate::{:method}\&#039;;&#039;,
			&#039;    $result = _Filters::run(__CLASS__, &quot;{:method}&quot;, $args,&#039;,
			&#039;        function($args) use(&amp;$method) {&#039;,
			&#039;            return call_user_func_array($method, $args);&#039;,
			&#039;        }&#039;,
			&#039;    );&#039;,
			&#039;    if (!isset(static::$staticResults[&quot;{:method}&quot;])) {&#039;,
			&#039;        static::$staticResults[&quot;{:method}&quot;] = [];&#039;,
			&#039;    }&#039;,
			&#039;    static::$staticResults[&quot;{:method}&quot;][] = [&#039;,
			&#039;        &quot;args&quot; =&gt; func_get_args(),&#039;,
			&#039;        &quot;result&quot; =&gt; $result,&#039;,
			&#039;        &quot;time&quot; =&gt; microtime(true),&#039;,
			&#039;    ];&#039;,
			&#039;    return $result;&#039;,
			&#039;}&#039;,
		],
		&#039;method&#039; =&gt; [
			&#039;{:modifiers} function {:method}({:args}) {&#039;,
			&#039;    $args = compact({:stringArgs});&#039;,
			&#039;    $args[&quot;hash&quot;] = spl_object_hash($this-&gt;mocker);&#039;,
			&#039;    $_method = [$this-&gt;mocker, &quot;{:method}&quot;];&#039;,
			&#039;    $result = _Filters::run(__CLASS__, &quot;{:method}&quot;, $args,&#039;,
			&#039;        function($args) use(&amp;$_method) {&#039;,
			&#039;           return call_user_func_array($_method, $args);&#039;,
			&#039;        }&#039;,
			&#039;    );&#039;,
			&#039;    if (!isset($this-&gt;results[&quot;{:method}&quot;])) {&#039;,
			&#039;        $this-&gt;results[&quot;{:method}&quot;] = [];&#039;,
			&#039;    }&#039;,
			&#039;    $this-&gt;results[&quot;{:method}&quot;][] = [&#039;,
			&#039;        &quot;args&quot; =&gt; func_get_args(),&#039;,
			&#039;        &quot;result&quot; =&gt; $result,&#039;,
			&#039;        &quot;time&quot; =&gt; microtime(true),&#039;,
			&#039;    ];&#039;,
			&#039;    return $result;&#039;,
			&#039;}&#039;,
		],
		&#039;applyFilter&#039; =&gt; [
			&#039;public {:static} function applyFilter($method, $filter = null) {&#039;,
			&#039;    $message  = &quot;&lt;mocked class&gt;::applyFilter() is deprecated. &quot;;&#039;,
			&#039;    $message .= &quot;Use Filters::applyFilter(&quot; . __CLASS__ .&quot;, ...) instead.&quot;;&#039;,
			&#039;    // trigger_error($message, E_USER_DEPRECATED);&#039;,
			&#039;    foreach ((array) $method as $m) {&#039;,
			&#039;        if ($filter === null) {&#039;,
			&#039;            _Filters::clear(__CLASS__, $m);&#039;,
			&#039;        } else {&#039;,
			&#039;            _Filters::apply(__CLASS__, $m, $filter);&#039;,
			&#039;        }&#039;,
			&#039;    }&#039;,
			&#039;}&#039;,
		],
		&#039;endClass&#039; =&gt; [
			&#039;}&#039;,
		],
	];</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
