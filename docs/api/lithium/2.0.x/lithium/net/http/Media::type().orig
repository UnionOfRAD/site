<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\net\http\Media::type() – Framework API v2.0.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/2.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (2.0.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/2.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/2.0.x/lithium/net" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">net</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/2.0.x/lithium/net/http" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">http</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<a href="/docs/api/lithium/2.0.x/lithium/net/http/Media" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Media</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="7" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">type()</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/2.0.x/lithium/net/http/Media" rel="up">../</a>		</ul>
	
													
										</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/2.0.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/2.0.x/lithium/net" class="symbol-segment">net</a>\<a href="/docs/api/lithium/2.0.x/lithium/net/http" class="symbol-segment">http</a>\<a href="/docs/api/lithium/2.0.x/lithium/net/http/Media" class="symbol-segment">Media</a>::type()		</h1>

		<section class="under">
															<div class="tags">
													<span class="tag public">public</span>
													<span class="tag">static</span>
								<span class="tag">method</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Maps a type name to a particular content-type (or multiple types) with a set of options, or
retrieves information about a type that has been defined.</p>
					</div>
				
									<div class="description">
						<p>Examples:</p>
<pre><code class="language-php">
``` embed:lithium\tests\cases\net\http\MediaTest::testMediaTypes(19-23) ```

``` embed:lithium\tests\cases\net\http\MediaTest::testMediaTypes(43-44) ```

Alternatively, can be used to detect the type name of a registered content type:
```
Media::type('application/json'); // returns 'json'
Media::type('application/javascript'); // returns 'javascript'
Media::type('text/javascript'); // also returns 'javascript'

Media::type('text/html'); // returns 'html'
Media::type('application/xhtml+xml'); // also returns 'html'
```

#### Content negotiation

When creating custom media types, specifying which content-type(s) to match isn't always
enough. For example, if you wish to serve a different set of templates to mobile web
browsers, you'd still want those templates served as HTML. You might add something like this:

```
Media::type('mobile', ['application/xhtml+xml', 'text/html']);
```

However, this would cause _all_ requests for HTML content to be interpreted as
`'mobile'`-type requests. Instead, we can use _content negotiation_ to granularly specify how
to match a particular type. Content negotiation is the process of examining the HTTP headers
provided in the request (including the content-types listed in the `Accept` header, and
optionally other things as well, like the `Accept-Language` or `User-Agent` headers), in
order to produce the best representation of the requested resource for the client; in other
words, the resource that most closely matches what the client is asking for.

Content negotiation with media types is made possible through the `'conditions'` key of the
`$options` parameter, which contains an array of assertions made against the `Request`
object. Each assertion (array key) can be one of three different things:

- `'type'` _boolean_: In the default routing, some routes have `{:type}` keys, which are
  designed to match file extensions in URLs. These values act as overrides for the
  HTTP `Accept` header, allowing different formats to be served with the same content
  type. For example, if you're serving JSONP, you'll want to serve it with the same
  content-type as JavaScript (since it is JavaScript), but you probably won't want to
  use the same template(s) or other settings. Therefore, when serving JSONP content, you
  can specify that the extension defined in the type must be present in the URL:
```
Media::type('jsonp', ['application/json'], [
// template settings...
'conditions' =&gt; ['type' =&gt; true]
]);
 ```
 Then, JSONP content will only ever be served when the request URL ends in `.jsonp`.

- `'&lt;prefix&gt;:&lt;key&gt;'` _string_: This type of assertion can be used to match against arbitrary
  information in the request, including headers (i.e. `'http:user_agent'`), environment
  variables (i.e. `'env:home'`), GET and POST data (i.e. `'query:foo'` or `'data:foo'`,
  respectively), and the HTTP method (`'http:method'`) of the request. For more information
  on possible keys, see `lithium\action\Request::get()`.

- `'&lt;detector&gt;'` _boolean_: Uses detector checks added to the `Request` object to make
  boolean assertions against the request. For example, if a detector called `'iPhone'` is
  attached, you can add `'iPhone' =&gt; true` to the `'conditions'` array in order to filter for
  iPhone requests only. See `lithium\action\Request::detect()` for more information on adding
  detectors.

</code></pre>
					</div>
							</section>

						<section id="params">
				<h3 class="h-beta">Parameters</h3>
				<ul class="parameters">
											<li>
							<span class="type">string</span>
							<code class="name">$type</code>
															<span class="parameter">
									<p>A file-extension-style type name, i.e. <code>'txt'</code>, <code>'js'</code>, or <code>'atom'</code>.
Alternatively, a mapped content type, i.e. <code>'text/html'</code>,
<code>'application/atom+xml'</code>, etc.; in which case, the matching type name (i.e.
'<code>html'</code> or <code>'atom'</code>) will be returned.</p>
								</span>
													</li>
											<li>
							<span class="type">mixed</span>
							<code class="name">$content</code>
															<span class="parameter">
									<p>Optional. A string or array containing the content-type(s) that
<code>$type</code> should map to.  If <code>$type</code> is an array of content-types, the first one listed
should be the "primary" type, and will be used as the <code>Content-type</code> header of any
<code>Response</code> objects served through this type.</p>
								</span>
													</li>
											<li>
							<span class="type">array</span>
							<code class="name">$options</code>
															<span class="parameter">
									<p>Optional.  The handling options for this media type. Possible keys are:</p>
<ul>
<li><code>'view'</code> <em>string</em>: Specifies the view class to use when rendering this content.
Note that no <code>'view'</code> class is specified by default.  If you want to
render templates using Lithium's default view class, use
<code>'lithium\template\View'</code></li>
<li><code>'decode'</code> <em>mixed</em>: A (string) function name or (object) closure that handles
decoding or unserializing content from this format.</li>
<li><code>'encode'</code> <em>mixed</em>: A (string) function name or (object) closure that handles
encoding or serializing content into this format.</li>
<li><code>'cast'</code> <em>boolean</em>: Used with <code>'encode'</code>. If <code>true</code>, all data passed into the
specified encode function is first cast to array structures.</li>
<li><code>'paths'</code> <em>array</em>: Optional key/value pairs mapping paths for
<code>'template'</code>, <code>'layout'</code>, and <code>'element'</code> template files.  Any keys ommitted
will use the default path.  The values should be <code>Text::insert()</code>-style
paths or an array of <code>Text::insert()</code>-style paths.  If it is an array,
each path will be tried in the order specified until a template is found.
This is useful for allowing custom templates while falling back on
default templates if no custom template was found.  If you want to
render templates without a layout, use a <code>false</code> value for <code>'layout'</code>.</li>
<li><code>'conditions'</code> <em>array</em>: Optional key/value pairs used as assertions in content
negotiation. See the above section on <strong>Content Negotiation</strong>.</li>
</ul>
								</span>
													</li>
									</ul>
			</section>
			
						<section id="return">
				<h3 class="h-beta">Returns</h3>
				<span class="type">mixed</span>
									<span class="return">
						<p>If <code>$content</code> and <code>$options</code> are empty, returns an array with <code>'content'</code> and
<code>'options'</code> keys, where <code>'content'</code> is the content-type(s) that correspond to
<code>$type</code> (can be a string or array, if multiple content-types are available), and
<code>'options'</code> is the array of options which define how this content-type should be
handled.  If <code>$content</code> or <code>$options</code> are non-empty, returns <code>null</code>.</p>
					</span>
							</section>
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/2.0.x/lithium/net/http/Media::$_types">lithium\net\http\Media::$_types</a>									<li><a href="/docs/api/lithium/2.0.x/lithium/net/http/Media::$_handlers">lithium\net\http\Media::$_handlers</a>									<li><a href="/docs/api/lithium/2.0.x/lithium/net/http/Media::negotiate()">lithium\net\http\Media::negotiate()</a>									<li><a href="/docs/api/lithium/2.0.x/lithium/action/Request::get()">lithium\action\Request::get()</a>									<li><a href="/docs/api/lithium/2.0.x/lithium/action/Request::is()">lithium\action\Request::is()</a>									<li><a href="/docs/api/lithium/2.0.x/lithium/action/Request::detect()">lithium\action\Request::detect()</a>									<li><a href="/docs/api/lithium/2.0.x/lithium/util/Text::insert()">lithium\util\Text::insert()</a>								</ul>
			</section>
			
						<section id="links">
				<h3 class="h-beta">Links</h3>
				<ul class="links">
									<li><a href="http://en.wikipedia.org/wiki/JSON#JSONP" target="new">http://en.wikipedia.org/wiki/JSON#JSONP</a>								</ul>
			</section>
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">	public static function type($type, $content = null, array $options = []) {
		$defaults = [
			&#039;view&#039; =&gt; false,
			&#039;paths&#039; =&gt; [
				&#039;template&#039; =&gt; &#039;{:library}/views/{:controller}/{:template}.{:type}.php&#039;,
				&#039;layout&#039;   =&gt; &#039;{:library}/views/layouts/{:layout}.{:type}.php&#039;,
				&#039;element&#039;  =&gt; &#039;{:library}/views/elements/{:template}.{:type}.php&#039;
			],
			&#039;encode&#039; =&gt; false,
			&#039;decode&#039; =&gt; false,
			&#039;cast&#039;   =&gt; true,
			&#039;conditions&#039; =&gt; []
		];

		if ($content === false) {
			unset(static::$_types[$type], static::$_handlers[$type]);
		}
		if (!$content &amp;&amp; !$options) {
			if (!$content = static::_types($type)) {
				return;
			}
			if ($type &amp;&amp; strpos($type, &#039;/&#039;)) {
				return $content;
			}
			if (is_array($content) &amp;&amp; isset($content[&#039;alias&#039;])) {
				return static::type($content[&#039;alias&#039;]);
			}
			return compact(&#039;content&#039;) + [&#039;options&#039; =&gt; static::handlers($type)];
		}
		if ($content) {
			static::$_types[$type] = (array) $content;
		}
		static::$_handlers[$type] = $options ? Set::merge($defaults, $options) : [];
	}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
