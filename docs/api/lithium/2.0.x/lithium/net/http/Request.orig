<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\net\http\Request – Framework API v2.0.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/2.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (2.0.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/2.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/2.0.x/lithium/net" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">net</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/2.0.x/lithium/net/http" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">http</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Request</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/2.0.x/lithium/net/http" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::__construct()">__construct()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::body()">body()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::cookies()">cookies()</a>												<li class="method protected">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::_cookies()">_cookies()</a>												<li class="method protected">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::_parseCookies()">_parseCookies()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::queryString()">queryString()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::to()">to()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::__toString()">__toString()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::headers()">headers()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::type()">type()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::_encode()">_encode()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::_decode()">_decode()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::$method">$method</a>												<li class="property public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::$query">$query</a>												<li class="property public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::$auth">$auth</a>												<li class="property public">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::$cookies">$cookies</a>												<li class="property protected">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Request::$_formats">$_formats</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::$protocol">$protocol</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::$version">$version</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::$headers">$headers</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::$_type">$_type</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message::$_classes">$_classes</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$scheme">$scheme</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$host">$host</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$port">$port</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$username">$username</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$password">$password</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$path">$path</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/2.0.x/lithium/net/Message::$body">$body</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/2.0.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/2.0.x/lithium/net" class="symbol-segment">net</a>\<a href="/docs/api/lithium/2.0.x/lithium/net/http" class="symbol-segment">http</a>\Request		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/2.0.x/lithium/net/http/Message" class="extends__symbol">lithium\net\http\Message</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Facilitates HTTP request creation by assembling connection and path info, <code>GET</code> and <code>POST</code> data,
and authentication credentials in a single, stateful object.</p>
					</div>
				
							</section>

			
			
			
			
			
						<section id="subclasses" class="section">
				<h3 class="h-beta">Subclasses</h3>
				<ul class="subclasses">
											<li><a href="/docs/api/lithium/2.0.x/lithium/action/Request">lithium\action\Request</a>									</ul>
			</section>
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class Request extends \lithium\net\http\Message {

	/**
	 * The method of the request, typically one of the following: `GET`, `POST`, `PUT`, `DELETE`,
	 * `OPTIONS`, `HEAD`, `TRACE` or `CONNECT`.
	 *
	 * @var string
	 */
	public $method = &#039;GET&#039;;

	/**
	 * Key/value pairs found encoded in the URL after the &#039;?&#039;.
	 *
	 * @var array
	 */
	public $query = [];

	/**
	 * Authentication type and parameters for HTTP Basic or Digest.
	 *
	 * Any array with a &#039;nonce&#039; attribute implies Digest authentication; all other non-empty values
	 * for imply Basic authentication.
	 *
	 * @see lithium\net\http\Auth::encode()
	 * @var mixed
	 */
	public $auth = null;

	/**
	 * Cookies.
	 *
	 * @var array
	 */
	public $cookies = [];

	/**
	 * An array of closures representing various formats this object can be exported to.
	 *
	 * @var array
	 */
	protected $_formats = [];

	/**
	 * Constructor. Adds config values to the public properties when a new object is created.
	 *
	 * @see lithium\net\http\Message::__construct()
	 * @see lithium\net\Message::__construct()
	 * @param array $config The available configuration options are the following. Further
	 *        options are inherited from the parent classes.
	 *        - `&#039;method&#039;` _string_: Defaults to `&#039;GET&#039;`.
	 *        - `&#039;path&#039;` _string_: Defaults to `null`.
	 *        - `&#039;query&#039;` _array_: Defaults to `[]`.
	 *        - `&#039;cookies&#039;` _array_: Defaults to `[]`.
	 *        - `&#039;type&#039;` _string_: Defaults to `null`.
	 *        - `&#039;auth&#039;` _mixed_: Defaults to `null`.
	 *        - `&#039;proxy&#039;` _string_: Defaults to `null`.
	 *        - `&#039;ignoreErrors&#039;` _boolean_: Defaults to `true`.
	 *        - `&#039;followLocation&#039;` _boolean_: Defaults to `true`.
	 * @return void
	 */
	public function __construct(array $config = []) {
		$defaults = [
			&#039;method&#039; =&gt; &#039;GET&#039;,
			&#039;query&#039; =&gt; [],
			&#039;cookies&#039; =&gt; [],
			&#039;type&#039; =&gt; null,
			&#039;auth&#039; =&gt; null,
			&#039;proxy&#039; =&gt; null,
			&#039;ignoreErrors&#039; =&gt; true,
			&#039;followLocation&#039; =&gt; true
		];
		$config += $defaults;

		$this-&gt;method  = $config[&#039;method&#039;];
		$this-&gt;query   = $config[&#039;query&#039;];
		$this-&gt;auth    = $config[&#039;auth&#039;];
		parent::__construct($config);

		$this-&gt;headers = [
			&#039;Host&#039; =&gt; $this-&gt;port ? &quot;{$this-&gt;host}:{$this-&gt;port}&quot; : $this-&gt;host,
			&#039;Connection&#039; =&gt; &#039;Close&#039;,
			&#039;User-Agent&#039; =&gt; &#039;Mozilla/5.0&#039;
		];
		foreach ([&#039;type&#039;, &#039;headers&#039;, &#039;cookies&#039;] as $field) {
			if ($value = $this-&gt;_config[$field]) {
				$this-&gt;{$field}($value);
			}
		}
		if ($cookies = $this-&gt;headers(&#039;Cookie&#039;)) {
			$this-&gt;_parseCookies($cookies);
		}

		$this-&gt;_formats += [
			&#039;url&#039; =&gt; function($req, $options) {
				$options[&#039;port&#039;] = $options[&#039;port&#039;] ? &quot;:{$options[&#039;port&#039;]}&quot; : &#039;&#039;;
				$options[&#039;path&#039;] = str_replace(&#039;//&#039;, &#039;/&#039;, $options[&#039;path&#039;]);

				return Text::insert(&quot;{:scheme}://{:host}{:port}{:path}{:query}&quot;, $options);
			},
			&#039;context&#039; =&gt; function($req, $options, $defaults) {
				$req-&gt;headers($options[&#039;headers&#039;]);

				return [&#039;http&#039; =&gt; array_diff_key($options, $defaults) + [
					&#039;content&#039; =&gt; $req-&gt;body(),
					&#039;method&#039; =&gt; $options[&#039;method&#039;],
					&#039;header&#039; =&gt; $req-&gt;headers(),
					&#039;protocol_version&#039; =&gt; $options[&#039;version&#039;],
					&#039;ignore_errors&#039; =&gt; $options[&#039;ignore_errors&#039;],
					&#039;follow_location&#039; =&gt; $options[&#039;follow_location&#039;],
					&#039;request_fulluri&#039; =&gt; $options[&#039;request_fulluri&#039;],
					&#039;proxy&#039; =&gt; $options[&#039;proxy&#039;]
				]];
			},
			&#039;string&#039; =&gt; function($req, $options) {
				$body = $req-&gt;body();
				$path = str_replace(&#039;//&#039;, &#039;/&#039;, $options[&#039;path&#039;]) . $options[&#039;query&#039;];
				$status = &quot;{$options[&#039;method&#039;]} {$path} {$req-&gt;protocol}&quot;;

				return join(&quot;\r\n&quot;, [$status, join(&quot;\r\n&quot;, $req-&gt;headers()), &quot;&quot;, $body]);
			}
		];
	}

	/**
	 * Compile the HTTP message body, optionally encoding its parts according to content type.
	 *
	 * @see lithium\net\http\Message::body()
	 * @see lithium\net\http\Message::_encode()
	 * @param mixed $data
	 * @param array $options
	 *        - `&#039;buffer&#039;` _integer_: split the body string
	 *        - `&#039;encode&#039;` _boolean_: encode the body based on the content type
	 *        - `&#039;decode&#039;` _boolean_: decode the body based on the content type
	 * @return array
	 */
	public function body($data = null, $options = []) {
		$defaults = [&#039;encode&#039; =&gt; true];
		return parent::body($data, $options + $defaults);
	}

	/**
	 * Add a cookie to header output, or return a single cookie or full cookie list.
	 *
	 * NOTE: Cookies values are expected to be scalar. This function will not serialize cookie values.
	 * If you wish to store a non-scalar value, you must serialize the data first.
	 *
	 * @param string $key
	 * @param string $value
	 * @return mixed
	 */
	public function cookies($key = null, $value = null) {
		if (is_string($key)) {
			if ($value === null) {
				return isset($this-&gt;cookies[$key]) ? $this-&gt;cookies[$key] : null;
			}
			if ($value === false) {
				unset($this-&gt;cookies[$key]);
				return $this-&gt;cookies;
			}
		}
		if ($key) {
			$cookies = is_array($key) ? $key : [$key =&gt; $value];
			$this-&gt;cookies = $cookies + $this-&gt;cookies;
		}
		return $this-&gt;cookies;
	}

	/**
	 * Render `Cookie` header, urlencoding invalid characters.
	 *
	 * NOTE: Technically &#039;+&#039; is a valid character, but many browsers erroneously convert these to
	 * spaces, so we must escape this too.
	 *
	 * @return string
	 */
	protected function _cookies() {
		$cookies = $this-&gt;cookies;
		$invalid = str_split(&quot;,; \+\t\r\n\013\014&quot;);
		$replace = array_map(&#039;rawurlencode&#039;, $invalid);

		foreach ($cookies as $key =&gt; &amp;$value) {
			if (!is_scalar($value)) {
				$message = &quot;Non-scalar value cannot be rendered for cookie `{$key}`&quot;;
				throw new UnexpectedValueException($message);
			}
			$value = strtr($value, array_combine($invalid, $replace));
			$value = &quot;{$key}={$value}&quot;;
		}
		return implode(&#039;; &#039;, $cookies);
	}

	/**
	 * Parse `Cookie` header.
	 *
	 * @param string $header `Cookie` header.
	 */
	protected function _parseCookies($header) {
		$cookies = array_map(&#039;trim&#039;, array_filter(explode(&#039;; &#039;, $header)));
		foreach ($cookies as $cookie) {
			list($name, $value) = array_map(&#039;urldecode&#039;, explode(&#039;=&#039;, $cookie, 2)) + [&#039;&#039;,&#039;&#039;];
			$this-&gt;cookies($name, $value);
		}
	}

	/**
	 * Get the full query string queryString.
	 *
	 * @param array $params
	 * @param string $format
	 * @return string
	 */
	public function queryString($params = [], $format = null) {
		$result = [];
		$query = [];

		foreach (array_filter([$this-&gt;query, $params]) as $querySet) {
			if (is_string($querySet)) {
				$result[] = $querySet;
				continue;
			}
			$query = array_merge($query, $querySet);
		}
		$query = array_filter($query);

		if ($format) {
			$q = null;
			foreach ($query as $key =&gt; $value) {
				if (!is_array($value)) {
					$q .= Text::insert($format, [
						&#039;key&#039; =&gt; urlencode($key),
						&#039;value&#039; =&gt; urlencode($value)
					]);
					continue;
				}
				foreach ($value as $val) {
					$q .= Text::insert($format, [
						&#039;key&#039; =&gt; urlencode(&quot;{$key}[]&quot;),
						&#039;value&#039; =&gt; urlencode($val)
					]);
				}
			}
			$result[] = substr($q, 0, -1);
		} else {
			$result[] = http_build_query($query);
		}

		$result = array_filter($result);
		return $result ? &quot;?&quot; . join(&quot;&amp;&quot;, $result) : null;
	}

	/**
	 * Converts the data in the record set to a different format, i.e. an array. Available
	 * options: array, URL, stream context configuration, or string.
	 *
	 * @see lithium\net\Message::to()
	 * @param string $format Format to convert to. Should be either `&#039;url&#039;`, which returns a string
	 *        representation of the URL that this request points to, or `&#039;context&#039;`, which returns an
	 *        array usable with PHP&#039;s `stream_context_create()` function. For more available formats,
	 *        see the parent method, `lithium\net\Message::to()`.
	 * @param array $options Allows overriding of specific portions of the URL, as follows. These
	 *        options should only be specified if you intend to replace the values that are already in
	 *        the `Request` object.
	 *        - `&#039;scheme&#039;` _string_: The protocol scheme of the URL.
	 *        - `&#039;method&#039;` _string_: If applicable, the HTTP method to use in the request. Mainly
	 *                               applies to the `&#039;context&#039;` format.
	 *        - `&#039;host&#039;` _string_: The host name the request is pointing at.
	 *        - `&#039;port&#039;` _string_: The host port, if any.
	 *        - `&#039;path&#039;` _string_: The URL path.
	 *        - `&#039;query&#039;` _mixed_: The query string of the URL as a string or array.
	 *        - `&#039;auth&#039;` _string_: Authentication information. See the constructor for details.
	 *        - `&#039;content&#039;` _string_: The body of the request.
	 *        - `&#039;headers&#039;` _array_: The request headers.
	 *        - `&#039;version&#039;` _string_: The HTTP version of the request, where applicable.
	 * @return mixed Varies; see the `$format` parameter for possible return values.
	 */
	public function to($format, array $options = []) {
		$defaults = [
			&#039;method&#039; =&gt; $this-&gt;method,
			&#039;scheme&#039; =&gt; $this-&gt;scheme,
			&#039;host&#039; =&gt; $this-&gt;host,
			&#039;port&#039; =&gt; $this-&gt;port,
			&#039;path&#039; =&gt; $this-&gt;path,
			&#039;query&#039; =&gt; null,
			&#039;auth&#039; =&gt; $this-&gt;auth,
			&#039;username&#039; =&gt; $this-&gt;username,
			&#039;password&#039; =&gt; $this-&gt;password,
			&#039;headers&#039; =&gt; [],
			&#039;cookies&#039; =&gt; [],
			&#039;proxy&#039; =&gt; $this-&gt;_config[&#039;proxy&#039;],
			&#039;body&#039; =&gt; null,
			&#039;version&#039; =&gt; $this-&gt;version,
			&#039;ignore_errors&#039; =&gt; $this-&gt;_config[&#039;ignoreErrors&#039;],
			&#039;follow_location&#039; =&gt; $this-&gt;_config[&#039;followLocation&#039;],
			&#039;request_fulluri&#039; =&gt; (boolean) $this-&gt;_config[&#039;proxy&#039;]
		];
		$options += $defaults;

		if (is_string($options[&#039;query&#039;])) {
			$options[&#039;query&#039;] = &quot;?&quot; . $options[&#039;query&#039;];
		} elseif ($options[&#039;query&#039;]) {
			$options[&#039;query&#039;] = &quot;?&quot; . http_build_query($options[&#039;query&#039;]);
		} elseif ($options[&#039;query&#039;] === null) {
			$options[&#039;query&#039;] = $this-&gt;queryString();
		}

		if ($options[&#039;auth&#039;]) {
			$data = [];

			if (is_array($options[&#039;auth&#039;]) &amp;&amp; !empty($options[&#039;auth&#039;][&#039;nonce&#039;])) {
				$data = [&#039;method&#039; =&gt; $options[&#039;method&#039;], &#039;uri&#039; =&gt; $options[&#039;path&#039;]];
				$data += $options[&#039;auth&#039;];
			}
			$auth = $this-&gt;_classes[&#039;auth&#039;];
			$data = $auth::encode($options[&#039;username&#039;], $options[&#039;password&#039;], $data);
			$this-&gt;headers(&#039;Authorization&#039;, $auth::header($data));
		}
		if ($this-&gt;cookies($options[&#039;cookies&#039;])) {
			$this-&gt;headers(&#039;Cookie&#039;, $this-&gt;_cookies());
		}
		$body = $this-&gt;body($options[&#039;body&#039;]);

		if ($body || !in_array($options[&#039;method&#039;], [&#039;GET&#039;, &#039;HEAD&#039;, &#039;DELETE&#039;])) {
			$this-&gt;headers(&#039;Content-Length&#039;, strlen($body));
		}

		$conv = isset($this-&gt;_formats[$format]) ? $this-&gt;_formats[$format] : null;
		return $conv ? $conv($this, $options, $defaults) : parent::to($format, $options);
	}

	/**
	 * Magic method to convert object to string.
	 *
	 * @return string
	 */
	public function __toString() {
		return $this-&gt;to(&#039;string&#039;);
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
