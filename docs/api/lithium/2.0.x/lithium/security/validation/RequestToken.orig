<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\security\validation\RequestToken – Framework API v2.0.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/2.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (2.0.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/2.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/2.0.x/lithium/security" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">security</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/2.0.x/lithium/security/validation" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">validation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">RequestToken</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/2.0.x/lithium/security/validation" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/security/validation/RequestToken::config()">config()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/security/validation/RequestToken::get()">get()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/security/validation/RequestToken::key()">key()</a>												<li class="method public">
				<a href="/docs/api/lithium/2.0.x/lithium/security/validation/RequestToken::check()">check()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property protected">
				<a href="/docs/api/lithium/2.0.x/lithium/security/validation/RequestToken::$_classes">$_classes</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/2.0.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/2.0.x/lithium/security" class="symbol-segment">security</a>\<a href="/docs/api/lithium/2.0.x/lithium/security/validation" class="symbol-segment">validation</a>\RequestToken		</h1>

		<section class="under">
															<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>The <code>RequestToken</code> class creates cryptographically-secure tokens and keys that can be used to
validate the authenticity of client requests.</p>
					</div>
				
									<div class="description">
						<p><code>RequestToken</code> will persist the token for the life of the client session, and generate
per-request keys that will match against that token.</p>
<p>Using these token/key pairs in forms and other non-idempotent requests will help you secure
your application against cross-site request forgeries, or CSRF attacks.</p>
<h3><a id="example" class="anchor" href="#example">Example</a></h3>
<pre><code class="language-php">// views/comments/add.html.php:
// ...
&lt;?=$this-&gt;form-&gt;create($object); ?&gt;
	&lt;?=$this-&gt;security-&gt;requestToken(); ?&gt;
	// Other fields...
&lt;?=$this-&gt;form-&gt;end(); ?&gt;
</code></pre>
<pre><code class="language-php">// controllers/CommentsController.php:
public function add() {
	if ($this-&gt;request-&gt;data &amp;&amp; !RequestToken::check($this-&gt;request)) {
		// Key didn't match the CSRF token. Regenerate the session token and
		// prompt the user to retry the form submission.
		RequestToken::get(['regenerate' =&gt; true]);
		return;
	}
	// Handle a normal request...
}
</code></pre>
					</div>
							</section>

			
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/2.0.x/lithium/template/helper/Security::requestToken()">lithium\template\helper\Security::requestToken()</a>								</ul>
			</section>
			
						<section id="links">
				<h3 class="h-beta">Links</h3>
				<ul class="links">
									<li><a href="http://shiflett.org/articles/cross-site-request-forgeries" target="new">Cross-Site Request Forgeries</a>								</ul>
			</section>
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class RequestToken {

	/**
	 * Class dependencies.
	 *
	 * @var array
	 */
	protected static $_classes = [
		&#039;session&#039; =&gt; &#039;lithium\storage\Session&#039;
	];

	/**
	 * Used to get or reconfigure dependencies with custom classes.
	 *
	 * @param array $config When assigning new configuration, should be an array containing a
	 *              `&#039;classes&#039;` key.
	 * @return array If `$config` is empty, returns an array with a `&#039;classes&#039;` key containing class
	 *         dependencies. Otherwise returns `null`.
	 */
	public static function config(array $config = []) {
		if (!$config) {
			return [&#039;classes&#039; =&gt; static::$_classes];
		}

		foreach ($config as $key =&gt; $val) {
			$key = &quot;_{$key}&quot;;

			if (isset(static::${$key})) {
				static::${$key} = $val + static::${$key};
			}
		}
	}

	/**
	 * Generates (or regenerates) a cryptographically-secure token to be used for the life of the
	 * client session, and stores the token using the `Session` class.
	 *
	 * @see lithium\security\Hash::calculate()
	 * @param array $options An array of options to be used when generating or storing the token:
	 *              - `&#039;regenerate&#039;` _boolean_: If `true`, will force the regeneration of a the
	 *                token, even if one is already available in the session. Defaults to `false`.
	 *              - `&#039;sessionKey&#039;` _string_: The key used for session storage and retrieval.
	 *                Defaults to `&#039;security.token&#039;`.
	 *              - `&#039;salt&#039;` _string_: If the token is being generated (or regenerated), sets a
	 *                custom salt value to be used by `Hash::calculate()`.
	 *              - `&#039;type&#039;` _string_: The hashing algorithm used by `Hash::calculate()` when
	 *                generating the token. Defaults to `&#039;sha512&#039;`.
	 * @return string Returns a cryptographically-secure client session token.
	 */
	public static function get(array $options = []) {
		$defaults = [
			&#039;regenerate&#039; =&gt; false,
			&#039;sessionKey&#039; =&gt; &#039;security.token&#039;,
			&#039;salt&#039; =&gt; null,
			&#039;type&#039; =&gt; &#039;sha512&#039;
		];
		$options += $defaults;
		$session = static::$_classes[&#039;session&#039;];

		if ($options[&#039;regenerate&#039;] || !($token = $session::read($options[&#039;sessionKey&#039;]))) {
			$token = Hash::calculate(uniqid(microtime(true)), $options);
			$session::write($options[&#039;sessionKey&#039;], $token);
		}
		return $token;
	}

	/**
	 * Generates a single-use key to be embedded in a form or used with another non-idempotent
	 * request (a request that changes the state of the server or application), that will match
	 * against a client session token using the `check()` method.
	 *
	 * @see lithium\security\validation\RequestToken::check()
	 * @param array $options An array of options to be passed to `RequestToken::get()`.
	 * @return string Returns a hashed key string for use with `RequestToken::check()`.
	 */
	public static function key(array $options = []) {
		return Password::hash(static::get($options));
	}

	/**
	 * Checks a single-use hash key against the session token that generated it, using
	 * a cryptographically-secure verification method. Accepts either the request key as a string,
	 * or a `Request` object with a `$data` property containing a `[&#039;security&#039;][&#039;token&#039;]` key.
	 *
	 * For example, the following two controller code samples are equivalent:
	 *
	 * ```
	 * $key = $this-&gt;request-&gt;data[&#039;security&#039;][&#039;token&#039;];
	 *
	 * if (!RequestToken::check($key)) {
	 * 	// Handle invalid request...
	 * }
	 * ```
	 *
	 * ```
	 * if (!RequestToken::check($this-&gt;request)) {
	 * 	// Handle invalid request...
	 * }
	 * ```
	 *
	 * @param mixed $key Either the actual key as a string, or a `Request` object containing the
	 *              key.
	 * @param array $options The options to use when matching the key to the token:
	 *              - `&#039;sessionKey&#039;` _string_: The key used when reading the token from the session.
	 * @return boolean Returns `true` if the hash key is a cryptographic match to the stored
	 *         session token. Returns `false` on failure, which indicates a forged request attempt.
	 */
	public static function check($key, array $options = []) {
		$defaults = [&#039;sessionKey&#039; =&gt; &#039;security.token&#039;];
		$options += $defaults;
		$session = static::$_classes[&#039;session&#039;];

		if (is_object($key) &amp;&amp; isset($key-&gt;data)) {
			$result = Set::extract($key-&gt;data, &#039;/security/token&#039;);
			$key = $result ? $result[0] : null;
		}
		return Password::check($session::read($options[&#039;sessionKey&#039;]), (string) $key);
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
