<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\util\Validator::check() – Framework API v1.3.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.3.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.3.x/lithium/util" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">util</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.3.x/lithium/util/Validator" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Validator</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">check()</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.3.x/lithium/util/Validator" rel="up">../</a>		</ul>
	
													
										</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.3.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.3.x/lithium/util" class="symbol-segment">util</a>\<a href="/docs/api/lithium/1.3.x/lithium/util/Validator" class="symbol-segment">Validator</a>::check()		</h1>

		<section class="under">
															<div class="tags">
													<span class="tag public">public</span>
													<span class="tag">static</span>
								<span class="tag">method</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Checks a set of values against a specified rules list. This method may be used to validate
any arbitrary array of data against a set of validation rules.</p>
					</div>
				
							</section>

						<section id="params">
				<h3 class="h-beta">Parameters</h3>
				<ul class="parameters">
											<li>
							<span class="type">array</span>
							<code class="name">$values</code>
															<span class="parameter">
									<p>An array of key/value pairs, where the values are to be checked.</p>
								</span>
													</li>
											<li>
							<span class="type">array</span>
							<code class="name">$rules</code>
															<span class="parameter">
									<p>An array of rules to check the values in <code>$values</code> against. Each key in
<code>$rules</code> should match a key contained in <code>$values</code>, and each value should be a
validation rule in one of the allowable formats. For example, if you are
validating a data set containing a <code>'credit_card'</code> key, possible values for
<code>$rules</code> would be as follows:</p>
<ul>
<li><code>array('credit_card' =&gt; 'You must include a credit card number')</code>: This is the
simplest form of validation rule, in which the value is simply a message to
display if the rule fails. Using this format, all other validation settings
inherit from the defaults, including the validation rule itself, which only
checks to see that the corresponding key in <code>$values</code> is present and contains
a value that is not empty. <em>Please note when globalizing validation messages:</em>
When specifying messages, it may be preferable to use a code string (i.e.
<code>'ERR_NO_TITLE'</code>) instead of the full text of the validation error. These code
strings may then be translated by the appropriate tools in the templating layer.</li>
<li><code>array('credit_card' =&gt; ['creditCard', 'message' =&gt; 'Invalid CC #'])</code>:
In the second format, the validation rule (in this case <code>creditCard</code>) and
associated configuration are specified as an array, where the rule to use is
the first value in the array (no key), and additional settings are specified
as other keys in the array. Please see the list below for more information on
allowed keys.</li>
<li>The final format allows you to apply multiple validation rules to a single
value, and it is specified as follows:
<code>array('credit_card' =&gt; [
['notEmpty', 'message' =&gt; 'You must include credit card number'],
['creditCard', 'message' =&gt; 'Your credit card number must be valid']
]);</code></li>
</ul>
								</span>
													</li>
											<li>
							<span class="type">array</span>
							<code class="name">$options</code>
															<span class="parameter">
									<p>Validator-specific options.
Each rule defined as an array can contain any of the following settings
(in addition to the first value, which represents the rule to be used):</p>
<ul>
<li><code>'message'</code> <em>string</em>: The error message to be returned if the validation
rule fails. See the note above regarding globalization of error messages.</li>
<li><code>'required</code>' <em>boolean</em>: Represents whether the value is required to be
present in <code>$values</code>. If <code>'required'</code> is set to <code>false</code>, the validation rule
will be skipped if the corresponding key is not present. Defaults to <code>true</code>.</li>
<li><code>'skipEmpty'</code> <em>boolean</em>: Similar to <code>'required'</code>, this setting (if <code>true</code>)
will cause the validation rule to be skipped if the corresponding value
is empty (an empty string or <code>null</code>). Defaults to <code>false</code>.</li>
<li><code>'format'</code> <em>string</em>: If the validation rule has multiple format definitions
(see the <code>add()</code> or <code>init()</code> methods), the name of the format to be used
can be specified here. Additionally, two special values can be used:
either <code>'any'</code>, which means that all formats will be checked and the rule
will pass if any format passes, or <code>'all'</code>, which requires all formats to
pass in order for the rule check to succeed.</li>
</ul>
								</span>
													</li>
									</ul>
			</section>
			
						<section id="return">
				<h3 class="h-beta">Returns</h3>
				<span class="type">array</span>
									<span class="return">
						<p>Returns an array containing all validation failures for data in <code>$values</code>,
where each key matches a key in <code>$values</code>, and each value is an array of
that element's validation errors.</p>
					</span>
							</section>
			
						<section id="filter" class="flag">
				<h3 class="h-beta">
					Filter
					<nav class="headline-nav">
						<a href="http://li3.me/docs/book/manual/1.x/common-tasks/filters">see how to use filters</a>					</nav>
				</h3>
				<p>
					This method can be filtered.				</p>
			</section>
			
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">	public static function check(array $values, array $rules, array $options = []) {
		$defaults = [
			&#039;notEmpty&#039;,
			&#039;message&#039; =&gt; null,
			&#039;required&#039; =&gt; true,
			&#039;skipEmpty&#039; =&gt; false,
			&#039;format&#039; =&gt; &#039;any&#039;,
			&#039;on&#039; =&gt; null,
			&#039;last&#039; =&gt; false
		];

		$options += $defaults;
		$params = compact(&#039;values&#039;, &#039;rules&#039;, &#039;options&#039;);

		return Filters::run(get_called_class(), __FUNCTION__, $params, function($params) {
			$values = $params[&#039;values&#039;];
			$rules = $params[&#039;rules&#039;];
			$options = $params[&#039;options&#039;];

			$errors = [];
			$events = (array) (isset($options[&#039;events&#039;]) ? $options[&#039;events&#039;] : null);
			$values = array_merge($values, Set::flatten($values));

			foreach ($rules as $field =&gt; $rules) {
				$rules = is_string($rules) ? [&#039;message&#039; =&gt; $rules] : $rules;
				$rules = is_array(current($rules)) ? $rules : [$rules];
				$errors[$field] = [];
				$options[&#039;field&#039;] = $field;

				foreach ($rules as $key =&gt; $rule) {
					if (array_key_exists(&#039;required&#039;, $rule) &amp;&amp; $rule[&#039;required&#039;] === null) {
						unset($rule[&#039;required&#039;]);
					}
					$rule += $options + compact(&#039;values&#039;);
					list($name) = $rule;

					if ($events &amp;&amp; $rule[&#039;on&#039;] &amp;&amp; !array_intersect($events, (array) $rule[&#039;on&#039;])) {
						continue;
					}
					if (!array_key_exists($field, $values)) {
						if ($rule[&#039;required&#039;]) {
							$errors[$field][$key] = $rule[&#039;message&#039;] ?: $key;
						}
						if ($rule[&#039;last&#039;]) {
							break;
						}
						continue;
					}
					if (empty($values[$field]) &amp;&amp; $rule[&#039;skipEmpty&#039;]) {
						continue;
					}

					if (!static::rule($name, $values[$field], $rule[&#039;format&#039;], $rule + $options)) {
						$errors[$field][$key] = $rule[&#039;message&#039;] ?: $key;

						if ($rule[&#039;last&#039;]) {
							break;
						}
					}
				}
			}
			return array_filter($errors);
		});
	}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
