<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\template\view\Renderer – Framework API v1.3.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.3.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.3.x/lithium/template" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">template</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.3.x/lithium/template/view" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">view</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Renderer</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.3.x/lithium/template/view" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::render()">render()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::__construct()">__construct()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::_init()">_init()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::__isset()">__isset()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::__get()">__get()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::__call()">__call()</a>												<li class="method public deprecated">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::respondsTo()">respondsTo()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::helper()">helper()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::strings()">strings()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::context()">context()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::handlers()">handlers()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::applyHandler()">applyHandler()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::request()">request()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::response()">response()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::view()">view()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::data()">data()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::set()">set()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::_render()">_render()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::__set_state()">__set_state()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::invokeMethod()">invokeMethod()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_instance()">_instance()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_stop()">_stop()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_parents()">_parents()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::applyFilter()">applyFilter()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_filter()">_filter()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_autoConfig">$_autoConfig</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_view">$_view</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_context">$_context</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_classes">$_classes</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_helpers">$_helpers</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_strings">$_strings</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_request">$_request</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_response">$_response</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_handlers">$_handlers</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_data">$_data</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_vars">$_vars</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/template/view/Renderer::$_options">$_options</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_config">$_config</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_parents">$_parents</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_methodFilters">$_methodFilters</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.3.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.3.x/lithium/template" class="symbol-segment">template</a>\<a href="/docs/api/lithium/1.3.x/lithium/template/view" class="symbol-segment">view</a>\Renderer		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated" class="extends__symbol">lithium\core\ObjectDeprecated</a>									</div>
									<div class="tags">
									<span class="tag">abstract</span>
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>The <code>Renderer</code> abstract class serves as a base for all concrete <code>Renderer</code> adapters.</p>
					</div>
				
									<div class="description">
						<p>When in a view, the local scope is that of an instance of <code>Renderer</code> - meaning that
<code>$this</code> in views is an instance of the current renderer adapter.</p>
<p>For more information about implementing your own template loaders or renderers, see the
<code>lithium\template\View</code> class.</p>
					</div>
							</section>

			
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/1.3.x/lithium/template/View">lithium\template\View</a>									<li><a href="/docs/api/lithium/1.3.x/lithium/template/adapter/File">lithium\template\adapter\File</a>									<li><a href="/docs/api/lithium/1.3.x/lithium/template/adapter/Simple">lithium\template\adapter\Simple</a>								</ul>
			</section>
			
			
						<section id="subclasses" class="section">
				<h3 class="h-beta">Subclasses</h3>
				<ul class="subclasses">
											<li><a href="/docs/api/lithium/1.3.x/lithium/template/view/adapter/File">lithium\template\view\adapter\File</a>											<li><a href="/docs/api/lithium/1.3.x/lithium/template/view/adapter/Simple">lithium\template\view\adapter\Simple</a>									</ul>
			</section>
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">abstract class Renderer extends \lithium\core\ObjectDeprecated {

	/**
	 * These configuration variables will automatically be assigned to their corresponding protected
	 * properties when the object is initialized.
	 *
	 * @var array
	 */
	protected $_autoConfig = [
		&#039;request&#039;, &#039;response&#039;, &#039;context&#039;, &#039;strings&#039;, &#039;handlers&#039;, &#039;view&#039;, &#039;classes&#039; =&gt; &#039;merge&#039;
	];

	/**
	 * Holds an instance of the `View` object that created this rendering context. See the `view()`
	 * method for more details.
	 *
	 * @see lithium\template\view\Renderer::view()
	 * @var object
	 */
	protected $_view = null;

	/**
	 * Context values that exist across all templates rendered in this context.  These values
	 * are usually rendered in the layout template after all other values have rendered.
	 *
	 * @var array
	 */
	protected $_context = [
		&#039;content&#039; =&gt; &#039;&#039;, &#039;title&#039; =&gt; &#039;&#039;, &#039;scripts&#039; =&gt; [], &#039;styles&#039; =&gt; [], &#039;head&#039; =&gt; []
	];

	/**
	 * `Renderer`&#039;s dependencies. These classes are used by the output handlers to generate URLs
	 * for dynamic resources and static assets.
	 *
	 * @see Renderer::$_handlers
	 * @var array
	 */
	protected $_classes = [
		&#039;router&#039; =&gt; &#039;lithium\net\http\Router&#039;,
		&#039;media&#039;  =&gt; &#039;lithium\net\http\Media&#039;
	];

	/**
	 * Contains the list of helpers currently in use by this rendering context. Helpers are loaded
	 * via the `helper()` method, which is called by `Renderer::__get()`, allowing for on-demand
	 * loading of helpers.
	 *
	 * @var array
	 */
	protected $_helpers = [];

	/**
	 * Aggregates named string templates used by helpers. Can be overridden to change the default
	 * strings a helper uses.
	 *
	 * @var array
	 */
	protected $_strings = [];

	/**
	 * The `Request` object instance, if applicable.
	 *
	 * @var object The request object.
	 */
	protected $_request = null;

	/**
	 * The `Response` object instance, if applicable.
	 *
	 * @var object The response object.
	 */
	protected $_response = null;

	/**
	 * Automatically matches up template strings by name to output handlers.
	 *
	 * A handler can either be a string, which represents a method name of the helper, or
	 * it can be a closure or callable object.
	 *
	 * A handler takes 3 parameters:
	 * 1. the value to be filtered
	 * 2. the name of the helper method that triggered the handler
	 * 3. the array of options passed to the `_render()`
	 *
	 * These handlers are shared among all helper objects, and are automatically triggered
	 * whenever a helper method renders a template string (using `_render()`) and a
	 * key which is to be embedded in the template string matches an array key of a
	 * corresponding handler.
	 *
	 * @see lithium\template\view\Renderer::applyHandler()
	 * @see lithium\template\view\Renderer::handlers()
	 * @var array
	 */
	protected $_handlers = [];

	/**
	 * An array containing any additional variables to be injected into view templates. This allows
	 * local variables to be communicated between multiple templates (i.e. an element and a layout)
	 * which are using the same rendering context.
	 *
	 * @see lithium\template\view\Renderer::set()
	 * @var array
	 */
	protected $_data = [];

	/**
	 * Variables that have been set from a view/element/layout/etc. that should be available to the
	 * same rendering context.
	 *
	 * @var array Key/value pairs of variables
	 */
	protected $_vars = [];

	/**
	 * Available options accepted by `template\View::render()`, used when rendering.
	 *
	 * @see lithium\template\View::render()
	 * @var array
	 */
	protected $_options = [];

	/**
	 * Render the template with given data. Abstract; must be added to subclasses.
	 *
	 * @param string $template
	 * @param array|string $data
	 * @param array $options
	 * @return string Returns the result of the rendered template.
	 */
	abstract public function render($template, $data = [], array $options = []);

	/**
	 * Constructor.
	 *
	 * @param array $config Available configuration options are:
	 *        - `view`: The `View` object associated with this renderer.
	 *        - `strings`: String templates used by helpers.
	 *        - `handlers`: An array of output handlers for string template inputs.
	 *        - `request`: The `Request` object associated with this renderer and passed to the
	 *           defined handlers.
	 *        - `response`: The `Response` object associated with this renderer.
	 *        - `context`: An array of the current rendering context data, including `content`,
	 *           `title`, `scripts`, `head` and `styles`.
	 * @return void
	 */
	public function __construct(array $config = []) {
		$defaults = [
			&#039;view&#039; =&gt; null,
			&#039;strings&#039; =&gt; [],
			&#039;handlers&#039; =&gt; [],
			&#039;request&#039; =&gt; null,
			&#039;response&#039; =&gt; null,
			&#039;context&#039; =&gt; [
				&#039;content&#039; =&gt; &#039;&#039;, &#039;title&#039; =&gt; &#039;&#039;, &#039;scripts&#039; =&gt; [],
				&#039;styles&#039; =&gt; [], &#039;head&#039; =&gt; []
			]
		];
		parent::__construct((array) $config + $defaults);
	}

	/**
	 * Sets the default output handlers for string template inputs.
	 *
	 * The default handlers available are:
	 * - `url`: Allows generating escaped and routed URLs using `Router::match()`. Note that
	 *          all falsey values, which includes an empty array, will result in `&#039;/&#039;` being
	 *          returned. For empty arrays this behavior is slightly different from using
	 *          `Router::match()` directly.
	 * - `path`: Generates an asset path.
	 * - `options`: Converts a set of parameters to HTML attributes into a string.
	 * - `title`: Returns the escaped title.
	 * - `value`: Returns an escaped value.
	 * - `scripts`: Returns a markup string of styles from context.
	 * - `styles`: Returns a markup string of scripts from context.
	 * - `head`
	 *
	 * @see lithium\net\http\Router::match()
	 * @see lithium\net\http\Media::asset()
	 * @see lithium\template\Helper::_attributes()
	 * @return void
	 */
	protected function _init() {
		parent::_init();

		$req =&amp; $this-&gt;_request;
		$ctx =&amp; $this-&gt;_context;
		$classes =&amp; $this-&gt;_classes;
		$h = $this-&gt;_view ? $this-&gt;_view-&gt;outputFilters[&#039;h&#039;] : null;

		$this-&gt;_handlers += [
			&#039;url&#039; =&gt; function($url, $ref, array $options = []) use (&amp;$classes, &amp;$req, $h) {
				$url = $classes[&#039;router&#039;]::match($url ?: &#039;&#039;, $req, $options);
				return $h ? str_replace(&#039;&amp;amp;&#039;, &#039;&amp;&#039;, $h($url)) : $url;
			},
			&#039;path&#039; =&gt; function($path, $ref, array $options = []) use (&amp;$classes, &amp;$req, $h) {
				$defaults = [&#039;base&#039; =&gt; $req ? $req-&gt;env(&#039;base&#039;) : &#039;&#039;];
				$type = &#039;generic&#039;;

				if (is_array($ref) &amp;&amp; $ref[0] &amp;&amp; $ref[1]) {
					list($helper, $methodRef) = $ref;
					list($class, $method) = explode(&#039;::&#039;, $methodRef);
					$type = $helper-&gt;contentMap[$method];
				}
				$path = $classes[&#039;media&#039;]::asset($path, $type, $options + $defaults);
				return $h ? $h($path) : $path;
			},
			&#039;options&#039; =&gt; &#039;attributes&#039;,
			&#039;title&#039;   =&gt; &#039;escape&#039;,
			&#039;value&#039;   =&gt; &#039;escape&#039;,
			&#039;scripts&#039; =&gt; function($scripts) use (&amp;$ctx) {
				return &quot;\n\t&quot; . join(&quot;\n\t&quot;, $ctx[&#039;scripts&#039;]) . &quot;\n&quot;;
			},
			&#039;styles&#039; =&gt; function($styles) use (&amp;$ctx) {
				return &quot;\n\t&quot; . join(&quot;\n\t&quot;, $ctx[&#039;styles&#039;]) . &quot;\n&quot;;
			},
			&#039;head&#039; =&gt; function($head) use (&amp;$ctx) {
				return &quot;\n\t&quot; . join(&quot;\n\t&quot;, $ctx[&#039;head&#039;]) . &quot;\n&quot;;
			}
		];
		unset($this-&gt;_config[&#039;view&#039;]);
	}

	/**
	 * Magic `__isset` method.
	 *
	 * Is triggered by calling isset() or empty() on inaccessible properties, and performs
	 * an `isset()` check on for keys in the current `context`.
	 *
	 * @param string $property The accessed property.
	 * @return boolean True if set, false otherwise.
	 */
	public function __isset($property) {
		return isset($this-&gt;_context[$property]);
	}

	/**
	 * Returns a helper object or context value by name.
	 *
	 * @param string $property The name of the helper or context value to return.
	 * @return mixed
	 * @filter
	 */
	public function __get($property) {
		return Filters::run($this, __FUNCTION__, compact(&#039;property&#039;), function($params) {
			$property = $params[&#039;property&#039;];

			foreach ([&#039;context&#039;, &#039;helpers&#039;] as $key) {
				if (isset($this-&gt;{&quot;_{$key}&quot;}[$property])) {
					return $this-&gt;{&quot;_{$key}&quot;}[$property];
				}
			}
			return $this-&gt;helper($property);
		});
	}

	/**
	 * Dispatches method calls for (a) rendering context values or (b) applying handlers to pieces
	 * of content. If `$method` is a key in `Renderer::$_context`, the corresponding context value
	 * will be returned (with the value run through a matching handler if one is available). If
	 * `$method` is a key in `Renderer::$_handlers`, the value passed as the first parameter in the
	 * method call will be passed through the handler and returned.
	 *
	 * @see lithium\template\view\Renderer::$_context
	 * @see lithium\template\view\Renderer::$_handlers
	 * @see lithium\template\view\Renderer::applyHandler()
	 * @param string $method The method name to call, usually either a rendering context value or a
	 *               content handler.
	 * @param array $params
	 * @return mixed
	 */
	public function __call($method, $params) {
		if (!isset($this-&gt;_context[$method]) &amp;&amp; !isset($this-&gt;_handlers[$method])) {
			return isset($params[0]) ? $params[0] : null;
		}
		if (!isset($this-&gt;_handlers[$method]) &amp;&amp; !$params) {
			return $this-&gt;_context[$method];
		}
		if (isset($this-&gt;_context[$method]) &amp;&amp; $params) {
			if (is_array($this-&gt;_context[$method])) {
				$this-&gt;_context[$method][] = $params[0];
			} else {
				$this-&gt;_context[$method] = $params[0];
			}
		}
		if (!isset($this-&gt;_context[$method])) {
			$params += [null, []];
			return $this-&gt;applyHandler(null, null, $method, $params[0], $params[1]);
		}
		return $this-&gt;applyHandler(null, null, $method, $this-&gt;_context[$method]);
	}

	/**
	 * Determines if a given method can be called.
	 *
	 * @deprecated
	 * @param string $method Name of the method.
	 * @param boolean $internal Provide `true` to perform check from inside the
	 *                class/object. When `false` checks also for public visibility;
	 *                defaults to `false`.
	 * @return boolean Returns `true` if the method can be called, `false` otherwise.
	 */
	public function respondsTo($method, $internal = false) {
		$message  = &#039;`&#039; . __METHOD__ . &#039;()` has been deprecated. &#039;;
		$message .= &quot;Use `is_callable([&lt;class&gt;, &#039;&lt;method&gt;&#039;])` instead.&quot;;
		trigger_error($message, E_USER_DEPRECATED);

		return is_callable([$this, $method], true);
	}

	/**
	 * Brokers access to helpers attached to this rendering context, and loads helpers on-demand if
	 * they are not available.
	 *
	 * @param string $name Helper name
	 * @param array $config
	 * @return object
	 */
	public function helper($name, array $config = []) {
		if (isset($this-&gt;_helpers[$name])) {
			return $this-&gt;_helpers[$name];
		}
		try {
			$config += [&#039;context&#039; =&gt; $this];
			return $this-&gt;_helpers[$name] = Libraries::instance(&#039;helper&#039;, ucfirst($name), $config);
		} catch (ClassNotFoundException $e) {
			if (ob_get_length()) {
				ob_end_clean();
			}
			throw new RuntimeException(&quot;Helper `{$name}` not found.&quot;);
		}
	}

	/**
	 * Manages template strings.
	 *
	 * @param mixed $strings
	 * @return mixed
	 */
	public function strings($strings = null) {
		if (is_array($strings)) {
			return $this-&gt;_strings = $this-&gt;_strings + $strings;
		}
		if (is_string($strings)) {
			return isset($this-&gt;_strings[$strings]) ? $this-&gt;_strings[$strings] : null;
		}
		return $this-&gt;_strings;
	}

	/**
	 * Returns either one or all context values for this rendering context. Context values persist
	 * across all templates rendered in the current context, and are usually outputted in a layout
	 * template.
	 *
	 * @see lithium\template\view\Renderer::$_context
	 * @param string $property If unspecified, an associative array of all context values is
	 *               returned. If a string is specified, the context value matching the name given
	 *               will be returned, or `null` if that name does not exist.
	 * @return mixed A string or array, depending on whether `$property` is specified.
	 */
	public function context($property = null) {
		if ($property) {
			return isset($this-&gt;_context[$property]) ? $this-&gt;_context[$property] : null;
		}
		return $this-&gt;_context;
	}

	/**
	 * Gets or adds content handlers from/to this rendering context, depending on the value of
	 * `$handlers`.  For more on how to implement handlers and the various types, see
	 * `applyHandler()`.
	 *
	 * @see lithium\template\view\Renderer::applyHandler()
	 * @see lithium\template\view\Renderer::$_handlers
	 * @param mixed $handlers If `$handlers` is empty or no value is provided, the current list
	 *              of handlers is returned.  If `$handlers` is a string, the handler with the name
	 *              matching the string will be returned, or null if one does not exist. If
	 *              `$handlers` is an array, the handlers named in the array will be merged into
	 *              the list of handlers in this rendering context, with the pre-existing handlers
	 *              taking precedence over those newly added.
	 * @return mixed Returns an array of handlers or a single handler reference, depending on the
	 *               value of `$handlers`.
	 */
	public function handlers($handlers = null) {
		if (is_array($handlers)) {
			return $this-&gt;_handlers += $handlers;
		}
		if (is_string($handlers)) {
			return isset($this-&gt;_handlers[$handlers]) ? $this-&gt;_handlers[$handlers] : null;
		}
		return $this-&gt;_handlers;
	}

	/**
	 * Filters a piece of content through a content handler.
	 *
	 * A handler can be:
	 * - a string containing the name of a method defined in `$helper`. The method is called with 3
	 *   parameters: the value to be handled, the helper method called (`$method`) and the
	 *   `$options` that were passed into `applyHandler`.
	 * - an array where the first element is an object reference, and the second element is a method
	 *   name.  The method name given will be called on the object with the same parameters as
	 *   above.
	 * - a closure, which takes the value as the first parameter, an array containing an instance of
	 *   the calling helper and the calling method name as the second, and `$options` as the third.
	 *
	 * In all cases, handlers should return the transformed version of `$value`.
	 *
	 * @see lithium\template\view\Renderer::handlers()
	 * @see lithium\template\view\Renderer::$_handlers
	 * @param object $helper The instance of the object (usually a helper) that is invoking
	 * @param string $method The object (helper) method which is applying the handler to the content
	 * @param string $name The name of the value to which the handler is applied, i.e. `&#039;url&#039;`,
	 *               `&#039;path&#039;` or `&#039;title&#039;`.
	 * @param mixed $value The value to be transformed by the handler, which is ultimately returned.
	 * @param array $options Any options which should be passed to the handler used in this call.
	 * @return mixed The transformed value of `$value`, after it has been processed by a handler.
	 */
	public function applyHandler($helper, $method, $name, $value, array $options = []) {
		if (!(isset($this-&gt;_handlers[$name]) &amp;&amp; $handler = $this-&gt;_handlers[$name])) {
			return $value;
		}

		switch (true) {
			case is_string($handler) &amp;&amp; !$helper:
				$helper = $this-&gt;helper(&#039;html&#039;);
			case is_string($handler) &amp;&amp; is_object($helper):
				return $helper-&gt;{$handler}($value, $method, $options);
			case is_array($handler) &amp;&amp; is_object($handler[0]):
				return $handler[0]-&gt;{$handler[1]}($value, $method, $options);
			case is_callable($handler):
				return $handler($value, [$helper, $method], $options);
			default:
				return $value;
		}
	}

	/**
	 * Returns the `Request` object associated with this rendering context.
	 *
	 * @return object Returns an instance of `lithium\action\Request`, which provides the context
	 *         for URLs, etc. which are generated in any templates rendered by this context.
	 */
	public function request() {
		return $this-&gt;_request;
	}

	/**
	 * Returns the `Response` object associated with this rendering context.
	 *
	 * @return object Returns an instance of `lithium\action\Response`, which provides the i.e.
	 *         the encoding for the document being the result of templates rendered by this context.
	 */
	public function response() {
		return $this-&gt;_response;
	}

	/**
	 * Retuns the `View` object that controls this rendering context&#039;s instance. This can be used,
	 * for example, to render view elements, i.e. `&lt;?=$this-&gt;view()-&gt;render(&#039;element&#039; $name); ?&gt;`.
	 *
	 * @return object
	 */
	public function view() {
		return $this-&gt;_view;
	}

	/**
	 * Returns all variables and their values that have been set.
	 *
	 * @return array Key/value pairs of data that has been set.
	 */
	public function data() {
		return $this-&gt;_data + $this-&gt;_vars;
	}

	/**
	 * Allows variables to be set by one template and used in subsequent templates rendered using
	 * the same context. For example, a variable can be set in a template and used in an element
	 * rendered within a template, or an element or template could set a variable which would be
	 * made available in the layout.
	 *
	 * @param array $data An array of key/value pairs representing local variables that should be
	 *              made available to all other templates rendered in this rendering context.
	 * @return void
	 */
	public function set(array $data = []) {
		$this-&gt;_data = $data + $this-&gt;_data;
		$this-&gt;_vars = $data + $this-&gt;_vars;
	}

	/**
	 * Shortcut method used to render elements and other nested templates from inside the templating
	 * layer.
	 *
	 * @see lithium\template\View::$_processes
	 * @see lithium\template\View::render()
	 * @param string $type The type of template to render, usually either `&#039;element&#039;` or
	 *               `&#039;template&#039;`. Indicates the process used to render the content. See
	 *               `lithium\template\View::$_processes` for more info.
	 * @param string $template The template file name. For example, if `&#039;header&#039;` is passed, and
	 *               `$type` is set to `&#039;element&#039;`, then the template rendered will be
	 *               `views/elements/header.html.php` (assuming the default configuration).
	 * @param array $data An array of any other local variables that should be injected into the
	 *              template. By default, only the values used to render the current template will
	 *              be sent. If `$data` is non-empty, both sets of variables will be merged.
	 * @param array $options Any options accepted by `template\View::render()`.
	 * @return string Returns a the rendered template content as a string.
	 */
	protected function _render($type, $template, array $data = [], array $options = []) {
		$context = $this-&gt;_options;
		$options += $this-&gt;_options;
		$result = $this-&gt;_view-&gt;render($type, $data + $this-&gt;_data, compact(&#039;template&#039;) + $options);
		$this-&gt;_options = $context;
		return $result;
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
