<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\console\command\Test – Framework API v1.3.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.3.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.3.x/lithium/console" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">console</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.3.x/lithium/console/command" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">command</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Test</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.3.x/lithium/console/command" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::_init()">_init()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::run()">run()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::_library()">_library()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::_path()">_path()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::__construct()">__construct()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::__invoke()">__invoke()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::_help()">_help()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::out()">out()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::error()">error()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::in()">in()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::header()">header()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::columns()">columns()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::nl()">nl()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::hr()">hr()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::clear()">clear()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::stop()">stop()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::_response()">_response()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::_stop()">_stop()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::__set_state()">__set_state()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::respondsTo()">respondsTo()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::invokeMethod()">invokeMethod()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_instance()">_instance()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_parents()">_parents()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::applyFilter()">applyFilter()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_filter()">_filter()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property public">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::$filters">$filters</a>												<li class="property public">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::$format">$format</a>												<li class="property public">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::$verbose">$verbose</a>												<li class="property public">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::$justAssertions">$justAssertions</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::$_handlers">$_handlers</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$request">$request</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$response">$response</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$silent">$silent</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$plain">$plain</a>												<li class="property public inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$help">$help</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$_classes">$_classes</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/console/Command::$_autoConfig">$_autoConfig</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_config">$_config</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_parents">$_parents</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_methodFilters">$_methodFilters</a>							</ul>
								<h3 class="h-gamma">Constants</h3>
			<ul>
												<li class="constant ">
				<a href="/docs/api/lithium/1.3.x/lithium/console/command/Test::EXIT_NO_TEST">EXIT_NO_TEST</a>							</ul>
			</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.3.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.3.x/lithium/console" class="symbol-segment">console</a>\<a href="/docs/api/lithium/1.3.x/lithium/console/command" class="symbol-segment">command</a>\Test		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.3.x/lithium/console/Command" class="extends__symbol">lithium\console\Command</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Runs a given set of tests and outputs the results.</p>
					</div>
				
							</section>

			
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/1.3.x/lithium/test">lithium\test</a>								</ul>
			</section>
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class Test extends \lithium\console\Command {

	/**
	 * Used as the exit code for errors where no test was mapped to file.
	 */
	const EXIT_NO_TEST = 4;

	/**
	 * List of filters to apply before/during/after test run, separated by commas.
	 *
	 * For example:
	 * ```sh
	 * lithium test lithium/tests/cases/core/LibrariesTest.php --filters=Coverage
	 * lithium test lithium/tests/cases/core/LibrariesTest.php --filters=Coverage,Profiler
	 * ```
	 *
	 * @var string Name of a filter or a comma separated list of filter names. Builtin filters:
	 *      - `Affected`:   Adds tests to the run affected by the classes covered by current tests.
	 *      - `Complexity`: Calculates the cyclomatic complexity of class methods, and shows
	 *                      worst-offenders and statistics.
	 *      - `Coverage`:   Runs code coverage analysis for the executed tests.
	 *      - `Profiler`:   Tracks timing and memory usage information for each test method.
	 */
	public $filters;

	/**
	 * Format to use for rendering results. Any other format than `txt` will
	 * cause the command to enter quiet mode, surpressing headers and any other
	 * decoration.
	 *
	 * @var string Either `txt` or `json`.
	 */
	public $format = &#039;txt&#039;;

	/**
	 * Enable verbose output especially for the `txt` format.
	 *
	 * @var boolean
	 */
	public $verbose = false;

	/**
	 * Prevent any headers or similar decoration being output.
	 * Good for command calls embedded into other scripts.
	 *
	 * @var boolean
	 */
	public $justAssertions = false;

	/**
	 * An array of closures, mapped by type, which are set up to handle different test output
	 * formats.
	 *
	 * @var array
	 */
	protected $_handlers = [];

	/**
	 * Initializes the output handlers.
	 *
	 * @see lithium\console\command\Test::$_handlers
	 * @return void
	 */
	protected function _init() {
		parent::_init();
		$command = $this;

		$this-&gt;_handlers += [
			&#039;txt&#039; =&gt; function($runner, $path) use ($command) {
				if (!$command-&gt;justAssertions) {
					$command-&gt;header(&#039;Test&#039;);
					$command-&gt;out(null, 1);
				}
				$colorize = function($result) {
					switch (trim($result)) {
						case &#039;.&#039;:
							return $result;
						case &#039;pass&#039;:
							return &quot;{:green}{$result}{:end}&quot;;
						case &#039;F&#039;:
						case &#039;fail&#039;:
							return &quot;{:red}{$result}{:end}&quot;;
						case &#039;E&#039;:
						case &#039;exception&#039;:
							return &quot;{:purple}{$result}{:end}&quot;;
						case &#039;S&#039;:
						case &#039;skip&#039;:
							return &quot;{:cyan}{$result}{:end}&quot;;
						default:
							return &quot;{:yellow}{$result}{:end}&quot;;
					}
				};

				if ($command-&gt;verbose) {
					$reporter = function($result) use ($command, $colorize) {
						$command-&gt;out(sprintf(
							&#039;[%s] on line %4s in %s::%s()&#039;,
							$colorize(sprintf(&#039;%9s&#039;, $result[&#039;result&#039;])),
							isset($result[&#039;line&#039;]) ? $result[&#039;line&#039;] : &#039;??&#039;,
							isset($result[&#039;class&#039;]) ? $result[&#039;class&#039;] : &#039;??&#039;,
							isset($result[&#039;method&#039;]) ? $result[&#039;method&#039;] : &#039;??&#039;
						));
					};
				} else {
					$i = 0;
					$columns = 60;

					$reporter = function($result) use ($command, &amp;$i, $columns, $colorize) {
						$shorten = [&#039;fail&#039;, &#039;skip&#039;, &#039;exception&#039;];

						if ($result[&#039;result&#039;] === &#039;pass&#039;) {
							$symbol = &#039;.&#039;;
						} elseif (in_array($result[&#039;result&#039;], $shorten)) {
							$symbol = strtoupper($result[&#039;result&#039;][0]);
						} else {
							$symbol = &#039;?&#039;;
						}
						$command-&gt;out($colorize($symbol), false);

						$i++;
						if ($i % $columns === 0) {
							$command-&gt;out();
						}
					};
				}
				$report = $runner(compact(&#039;reporter&#039;));

				if (!$command-&gt;justAssertions) {
					$stats = $report-&gt;stats();

					$command-&gt;out(null, 2);
					$command-&gt;out($report-&gt;render(&#039;result&#039;, $stats));
					$command-&gt;out($report-&gt;render(&#039;errors&#039;, $stats));

					if ($command-&gt;verbose) {
						$command-&gt;out($report-&gt;render(&#039;skips&#039;, $stats));
					}

					foreach ($report-&gt;filters() as $filter =&gt; $options) {
						$data = $report-&gt;results[&#039;filters&#039;][$filter];
						$command-&gt;out($report-&gt;render($options[&#039;name&#039;], compact(&#039;data&#039;)));
					}
				}
				return $report;
			},
			&#039;json&#039; =&gt; function($runner, $path) use ($command) {
				$report = $runner();
				$filters = [];

				if ($results = $report-&gt;filters()) {
					foreach ($results as $filter =&gt; $options) {
						$filters[$options[&#039;name&#039;]] = $report-&gt;results[&#039;filters&#039;][$filter];
					}
				}
				$command-&gt;out($report-&gt;render(&#039;stats&#039;, $report-&gt;stats() + compact(&#039;filters&#039;)));
				return $report;
			}
		];
	}

	/**
	 * Runs tests given a path to a directory or file containing tests. The path to the
	 * test(s) may be absolute or relative to the current working directory.
	 *
	 * ```sh
	 * li3 test lithium/tests/cases/core/LibrariesTest.php
	 * li3 test lithium/tests/cases/core
	 * ```
	 *
	 * If you are in the working directory of an application or plugin and wish to run all tests,
	 * simply execute the following:
	 *
	 * ```sh
	 * li3 test tests/cases
	 * ```
	 *
	 * If you are in the working directory of an application and wish to run a plugin, execute one
	 * of the following:
	 *
	 * ```sh
	 * li3 test libraries/&lt;plugin&gt;/tests/cases
	 * li3 test &lt;plugin&gt;/tests/cases
	 * ```
	 *
	 *
	 * This will run `&lt;library&gt;/tests/cases/&lt;package&gt;/&lt;class&gt;Test.php`:
	 *
	 * ```sh
	 * li3 test &lt;library&gt;/&lt;package&gt;/&lt;class&gt;.php
	 * ```
	 *
	 * @param string $path Absolute or relative path to tests or a file which
	 *                     corresponding test should be run.
	 * @return integer|boolean Will (indirectly) exit with status `1` if one or more tests
	 *         failed otherwise with `0`.
	 */
	public function run($path = null) {
		if (!$path = $this-&gt;_path($path)) {
			return false;
		}
		if (!preg_match(&#039;/(tests|Test\.php)/&#039;, $path)) {
			if (!$path = Unit::get($path)) {
				$this-&gt;error(&#039;Cannot map path to test path.&#039;);
				return static::EXIT_NO_TEST;
			}
		}
		$handlers = $this-&gt;_handlers;

		if (!isset($handlers[$this-&gt;format]) || !is_callable($handlers[$this-&gt;format])) {
			$this-&gt;error(sprintf(&#039;No handler for format `%s`... &#039;, $this-&gt;format));
			return false;
		}
		$filters = $this-&gt;filters ? array_map(&#039;trim&#039;, explode(&#039;,&#039;, $this-&gt;filters)) : [];
		$params = compact(&#039;filters&#039;) + [&#039;format&#039; =&gt; $this-&gt;format];
		$runner = function($options = []) use ($path, $params) {
			return Dispatcher::run($path, $params + $options);
		};
		$report = $handlers[$this-&gt;format]($runner, $path);
		$stats = $report-&gt;stats();
		return $stats[&#039;success&#039;];
	}

	/**
	 * Finds a library for given path.
	 *
	 * @param string $path Normalized (to slashes) absolute or relative path.
	 * @return string the name of the library
	 */
	protected function _library($path) {
		$result = null;
		$match = &#039;&#039;;
		foreach (Libraries::get() as $name =&gt; $library) {
			if (strpos($path, $library[&#039;path&#039;]) !== 0) {
				continue;
			}
			if (strlen($library[&#039;path&#039;]) &gt; strlen($match)) {
				$result = $name;
				$match = $library[&#039;path&#039;];
			}
		}
		return $result;
	}

	/**
	 * Validates and gets a fully-namespaced class path from an absolute or
	 * relative physical path to a directory or file. The final class path may
	 * be partial in that in doesn&#039;t contain the class name.
	 *
	 * This method can be thought of the reverse of `Libraries::path()`.
	 *
	 * ```
	 * lithium/tests/cases/core/LibrariesTest.php -&gt; lithium\tests\cases\core\LibrariesTest
	 * lithium/tests/cases/core                   -&gt; lithium\tests\cases\core
	 * lithium/core/Libraries.php                 -&gt; lithium\core\Libraries
	 * lithium/core/                              -&gt; lithium\core
	 * lithium/core                               -&gt; lithium\core
	 * ```
	 *
	 * @see lithium\core\Libraries::path()
	 * @param string $path The directory of or file path to one or more classes.
	 * @return string Returns a fully-namespaced class path, or `false`, if an error occurs.
	 */
	protected function _path($path) {
		$path = rtrim(str_replace(&#039;\\&#039;, &#039;/&#039;, $path), &#039;/&#039;);

		if (!$path) {
			$this-&gt;error(&#039;Please provide a path to tests.&#039;);
			return false;
		}
		if ($path[0] === &#039;/&#039;) {
			$library = $this-&gt;_library($path);
		}
		if ($path[0] !== &#039;/&#039;) {
			$libraries = array_reduce(Libraries::get(), function($v, $w) {
				$v[] = basename($w[&#039;path&#039;]);
				return $v;
			});

			$library = $this-&gt;_library($this-&gt;request-&gt;env(&#039;working&#039;) . &#039;/&#039; . $path);
			$parts = explode(&#039;/&#039;, str_replace(&quot;../&quot;, &quot;&quot;, $path));
			$plugin = array_shift($parts);

			if ($plugin === &#039;libraries&#039;) {
				$plugin = array_shift($parts);
			}
			if (in_array($plugin, $libraries)) {
				$library = $plugin;
				$path = join(&#039;/&#039;, $parts);
			}
		}
		if (empty($library)) {
			$this-&gt;error(&quot;No library found in path `{$path}`.&quot;);
			return false;
		}
		if (!$config = Libraries::get($library)) {
			$this-&gt;error(&quot;Library `{$library}` does not exist.&quot;);
			return false;
		}
		$path = str_replace($config[&#039;path&#039;], null, $path);
		$realpath = $config[&#039;path&#039;] . &#039;/&#039; . $path;

		if (!realpath($realpath)) {
			$this-&gt;error(&quot;Path `{$realpath}` not found.&quot;);
			return false;
		}
		$class = str_replace(&quot;.php&quot;, &quot;&quot;, str_replace(&#039;/&#039;, &#039;\\&#039;, ltrim($path, &#039;/&#039;)));
		return $config[&#039;prefix&#039;] . $class;
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
