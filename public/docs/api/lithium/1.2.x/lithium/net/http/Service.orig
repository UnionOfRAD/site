<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\net\http\Service – Framework API v1.2.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.2.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.2.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.2.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.2.x/lithium/net" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">net</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.2.x/lithium/net/http" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">http</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Service</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.2.x/lithium/net/http" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::__construct()">__construct()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::_init()">_init()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::__call()">__call()</a>												<li class="method public deprecated">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::respondsTo()">respondsTo()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::head()">head()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::get()">get()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::post()">post()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::put()">put()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::patch()">patch()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::delete()">delete()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::send()">send()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::_request()">_request()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::__set_state()">__set_state()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::invokeMethod()">invokeMethod()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::_instance()">_instance()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::_stop()">_stop()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::_parents()">_parents()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::applyFilter()">applyFilter()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::_filter()">_filter()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::$connection">$connection</a>												<li class="property public">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::$last">$last</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::$_autoConfig">$_autoConfig</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::$_responseTypes">$_responseTypes</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::$_isConnected">$_isConnected</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.2.x/lithium/net/http/Service::$_classes">$_classes</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::$_config">$_config</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::$_parents">$_parents</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated::$_methodFilters">$_methodFilters</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.2.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.2.x/lithium/net" class="symbol-segment">net</a>\<a href="/docs/api/lithium/1.2.x/lithium/net/http" class="symbol-segment">http</a>\Service		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.2.x/lithium/core/ObjectDeprecated" class="extends__symbol">lithium\core\ObjectDeprecated</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Basic Http Service.</p>
					</div>
				
							</section>

			
			
			
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class Service extends \lithium\core\ObjectDeprecated {

	/**
	 * The `Socket` instance used to send `Service` calls.
	 *
	 * @var lithium\net\Socket
	 */
	public $connection = null;

	/**
	 * Holds the last request and response object
	 *
	 * @var object
	 */
	public $last = null;

	/**
	 * Auto config
	 *
	 * @var array
	 */
	protected $_autoConfig = [&#039;classes&#039; =&gt; &#039;merge&#039;, &#039;responseTypes&#039;];

	/**
	 * Array of closures that return various pieces of information about an HTTP response.
	 *
	 * @var array
	 */
	protected $_responseTypes = [];

	/**
	 * Indicates whether `Service` can connect to the HTTP endpoint for which it is configured.
	 * Defaults to true until a connection attempt fails.
	 *
	 * @var boolean
	 */
	protected $_isConnected = false;

	/**
	 * Fully-name-spaced class references to `Service` class dependencies.
	 *
	 * @var array
	 */
	protected $_classes = [
		&#039;media&#039;    =&gt; &#039;lithium\net\http\Media&#039;,
		&#039;request&#039;  =&gt; &#039;lithium\net\http\Request&#039;,
		&#039;response&#039; =&gt; &#039;lithium\net\http\Response&#039;
	];

	/**
	 * Constructor. Initializes a new `Service` instance with the default HTTP request settings
	 * and transport- and format-handling classes.
	 *
	 * @param array $config Available configuration options are:
	 *        - `&#039;persistent&#039;` _boolean_
	 *        - `&#039;scheme&#039;` _string_
	 *        - `&#039;host&#039;` _string_
	 *        - `&#039;port&#039;` _integer_
	 *        - `&#039;timeout&#039;` _integer_
	 *        - `&#039;auth&#039;` _boolean_
	 *        - `&#039;username&#039;` _string_
	 *        - `&#039;password&#039;` _string_
	 *        - `&#039;encoding&#039;` _string_
	 *        - `&#039;socket&#039;` _string_
	 * @return void
	 */
	public function __construct(array $config = []) {
		$defaults = [
			&#039;persistent&#039; =&gt; false,
			&#039;scheme&#039;     =&gt; &#039;http&#039;,
			&#039;host&#039;       =&gt; &#039;localhost&#039;,
			&#039;port&#039;       =&gt; null,
			&#039;timeout&#039;    =&gt; 30,
			&#039;auth&#039;       =&gt; null,
			&#039;username&#039;   =&gt; null,
			&#039;password&#039;   =&gt; null,
			&#039;encoding&#039;   =&gt; &#039;UTF-8&#039;,
			&#039;socket&#039;     =&gt; &#039;Context&#039;
		];
		parent::__construct($config + $defaults);
	}

	/**
	 * Initialize connection.
	 *
	 * @return void
	 */
	protected function _init() {
		$config = [&#039;classes&#039; =&gt; $this-&gt;_classes] + $this-&gt;_config;

		try {
			$this-&gt;connection = Libraries::instance(&#039;socket&#039;, $config[&#039;socket&#039;], $config);
		} catch(ClassNotFoundException $e) {
			$this-&gt;connection = null;
		}
		$this-&gt;_responseTypes += [
			&#039;headers&#039; =&gt; function($response) { return $response-&gt;headers; },
			&#039;body&#039; =&gt; function($response) { return $response-&gt;body(); },
			&#039;code&#039; =&gt; function($response) { return $response-&gt;status[&#039;code&#039;]; }
		];
	}

	/**
	 * Magic method to handle other HTTP methods.
	 *
	 * @param string $method
	 * @param string $params
	 * @return mixed
	 */
	public function __call($method, $params = []) {
		array_unshift($params, $method);
		return call_user_func_array(array($this, &#039;send&#039;), $params);
	}

	/**
	 * Determines if a given method can be called.
	 *
	 * @deprecated
	 * @param string $method Name of the method.
	 * @param boolean $internal Provide `true` to perform check from inside the
	 *                class/object. When `false` checks also for public visibility;
	 *                defaults to `false`.
	 * @return boolean Returns `true` if the method can be called, `false` otherwise.
	 */
	public function respondsTo($method, $internal = false) {
		$message  = &#039;`&#039; . __METHOD__ . &#039;()` has been deprecated. &#039;;
		$message .= &quot;Use `is_callable([&lt;class&gt;, &#039;&lt;method&gt;&#039;])` instead.&quot;;
		trigger_error($message, E_USER_DEPRECATED);

		return is_callable([$this, $method], true);
	}

	/**
	 * Send HEAD request.
	 *
	 * @param string $path
	 * @param array $data
	 * @param array $options
	 * @return string
	 */
	public function head($path = null, $data = [], array $options = []) {
		$defaults = [&#039;return&#039; =&gt; &#039;headers&#039;, &#039;type&#039; =&gt; false];
		return $this-&gt;send(__FUNCTION__, $path, $data, $options + $defaults);
	}

	/**
	 * Send GET request.
	 *
	 * @param string $path
	 * @param array $data
	 * @param array $options
	 * @return string
	 */
	public function get($path = null, $data = [], array $options = []) {
		$defaults = [&#039;type&#039; =&gt; false];
		return $this-&gt;send(__FUNCTION__, $path, $data, $options + $defaults);
	}

	/**
	 * Send POST request.
	 *
	 * @param string $path
	 * @param array $data
	 * @param array $options
	 * @return string
	 */
	public function post($path = null, $data = [], array $options = []) {
		return $this-&gt;send(__FUNCTION__, $path, $data, $options);
	}

	/**
	 * Send PUT request.
	 *
	 * @param string $path
	 * @param array $data
	 * @param array $options
	 * @return string
	 */
	public function put($path = null, $data = [], array $options = []) {
		return $this-&gt;send(__FUNCTION__, $path, $data, $options);
	}

	/**
	 * Send PATCH request.
	 *
	 * @param string $path
	 * @param array $data
	 * @param array $options
	 * @return string
	 */
	public function patch($path = null, $data = [], array $options = []) {
		return $this-&gt;send(__FUNCTION__, $path, $data, $options);
	}

	/**
	 * Send DELETE request.
	 *
	 * @param string $path
	 * @param array $data
	 * @param array $options
	 * @return string
	 */
	public function delete($path = null, $data = [], array $options = []) {
		$defaults = [&#039;type&#039; =&gt; false];
		return $this-&gt;send(__FUNCTION__, $path, $data, $options + $defaults);
	}

	/**
	 * Send request and return response data. Will open the connection if
	 * needed and always close it after sending the request.
	 *
	 * Will automatically authenticate when receiving a `401` HTTP status code
	 * then continue retrying sending initial request.
	 *
	 * @param string $method
	 * @param string $path
	 * @param array $data the parameters for the request. For GET/DELETE this is the query string
	 *        for POST/PUT this is the body
	 * @param array $options passed to request and socket
	 * @return string
	 */
	public function send($method, $path = null, $data = [], array $options = []) {
		$defaults = [&#039;return&#039; =&gt; &#039;body&#039;];
		$options += $defaults;
		$request = $this-&gt;_request($method, $path, $data, $options);
		$options += [&#039;message&#039; =&gt; $request];

		if (!$this-&gt;connection || !$this-&gt;connection-&gt;open($options)) {
			return;
		}
		$response = $this-&gt;connection-&gt;send($request, $options);
		$this-&gt;connection-&gt;close();

		if ($response-&gt;status[&#039;code&#039;] == 401 &amp;&amp; ($auth = $response-&gt;digest())) {
			$request-&gt;auth = $auth;
			$this-&gt;connection-&gt;open([&#039;message&#039; =&gt; $request] + $options);
			$response = $this-&gt;connection-&gt;send($request, $options);
			$this-&gt;connection-&gt;close();
		}
		$this-&gt;last = (object) compact(&#039;request&#039;, &#039;response&#039;);

		$handlers = $this-&gt;_responseTypes;
		$handler = isset($handlers[$options[&#039;return&#039;]]) ? $handlers[$options[&#039;return&#039;]] : null;

		return $handler ? $handler($response) : $response;
	}

	/**
	 * Instantiates a request object (usually an instance of `http\Request`) and tests its
	 * properties based on the request type and data to be sent.
	 *
	 * @param string $method The HTTP method of the request, i.e. `&#039;GET&#039;`, `&#039;HEAD&#039;`, `&#039;OPTIONS&#039;`,
	 *        etc. Can be passed in upper- or lower-case.
	 * @param string $path The
	 * @param string $data
	 * @param string $options
	 * @return object Returns an instance of `http\Request`, configured with an HTTP method, query
	 *         string or POST/PUT/PATCH data, and URL.
	 */
	protected function _request($method, $path, $data, $options) {
		$defaults = [&#039;type&#039; =&gt; &#039;form&#039;];
		$options += $defaults + $this-&gt;_config;

		$request = Libraries::instance(null, &#039;request&#039;, $options, $this-&gt;_classes);
		$request-&gt;path = str_replace(&#039;//&#039;, &#039;/&#039;, &quot;{$request-&gt;path}{$path}&quot;);
		$request-&gt;method = $method = strtoupper($method);
		$hasBody = in_array($method, [&#039;POST&#039;, &#039;PUT&#039;, &#039;PATCH&#039;]);
		$hasBody ? $request-&gt;body($data) : $request-&gt;query = $data;
		return $request;
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
