<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\test\Unit::assertTags() – Framework API v1.3.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.3.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.3.x/lithium/test" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">test</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<a href="/docs/api/lithium/1.3.x/lithium/test/Unit" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Unit</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="6" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">assertTags()</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.3.x/lithium/test/Unit" rel="up">../</a>		</ul>
	
													
										</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.3.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.3.x/lithium/test" class="symbol-segment">test</a>\<a href="/docs/api/lithium/1.3.x/lithium/test/Unit" class="symbol-segment">Unit</a>::assertTags()		</h1>

		<section class="under">
															<div class="tags">
													<span class="tag public">public</span>
												<span class="tag">method</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Takes an array $expected and generates a regex from it to match the provided $string.
Samples for $expected:</p>
					</div>
				
									<div class="description">
						<p>Checks for an input tag with a name attribute (contains any non-empty value) and an id
attribute that contains 'my-input':</p>
<pre><code class="language-php">    ['input' =&gt; ['name', 'id' =&gt; 'my-input']]
</code></pre>
<p>Checks for two p elements with some text in them:</p>
<pre><code class="language-php">[
    ['p' =&gt; true],
    'textA',
    '/p',
    ['p' =&gt; true],
    'textB',
    '/p'
]
</code></pre>
<p>You can also specify a pattern expression as part of the attribute values, or the tag
being defined, if you prepend the value with preg: and enclose it with slashes, like so:</p>
<pre><code class="language-php">[
    ['input' =&gt; ['name', 'id' =&gt; 'preg:/FieldName\d+/']],
    'preg:/My\s+field/'
]
</code></pre>
<p>Important: This function is very forgiving about whitespace and also accepts any
permutation of attribute order. It will also allow whitespaces between specified tags.</p>
					</div>
							</section>

						<section id="params">
				<h3 class="h-beta">Parameters</h3>
				<ul class="parameters">
											<li>
							<span class="type">string</span>
							<code class="name">$string</code>
															<span class="parameter">
									<p>An HTML/XHTML/XML string</p>
								</span>
													</li>
											<li>
							<span class="type">array</span>
							<code class="name">$expected</code>
															<span class="parameter">
									<p>An array, see above</p>
								</span>
													</li>
									</ul>
			</section>
			
						<section id="return">
				<h3 class="h-beta">Returns</h3>
				<span class="type">boolean</span>
									<span class="return">
						<p><code>true</code> if the assertion succeeded, <code>false</code> otherwise.</p>
					</span>
							</section>
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/1.3.x/lithium/test/Unit::assert()">lithium\test\Unit::assert()</a>								</ul>
			</section>
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">	public function assertTags($string, $expected) {
		$regex = [];
		$normalized = [];

		foreach ((array) $expected as $key =&gt; $val) {
			if (!is_numeric($key)) {
				$normalized[] = [$key =&gt; $val];
			} else {
				$normalized[] = $val;
			}
		}
		$i = 0;

		foreach ($normalized as $tags) {
			$i++;
			if (is_string($tags) &amp;&amp; $tags[0] === &#039;&lt;&#039;) {
				$tags = [substr($tags, 1) =&gt; []];
			} elseif (is_string($tags)) {
				$tagsTrimmed = preg_replace(&#039;/\s+/m&#039;, &#039;&#039;, $tags);

				if (preg_match(&#039;/^\*?\//&#039;, $tags, $match) &amp;&amp; $tagsTrimmed !== &#039;//&#039;) {
					$prefix = [null, null];

					if ($match[0] === &#039;*/&#039;) {
						$prefix = [&#039;Anything, &#039;, &#039;.*?&#039;];
					}
					$regex[] = [
						sprintf(&#039;%sClose %s tag&#039;, $prefix[0], substr($tags, strlen($match[0]))),
						sprintf(&#039;%s&lt;[\s]*\/[\s]*%s[\s]*&gt;[\n\r]*&#039;, $prefix[1], substr(
							$tags, strlen($match[0])
						)),
						$i
					];
					continue;
				}

				if (!empty($tags) &amp;&amp; preg_match(&#039;/^regex\:\/(.+)\/$/i&#039;, $tags, $matches)) {
					$tags = $matches[1];
					$type = &#039;Regex matches&#039;;
				} else {
					$tags = preg_quote($tags, &#039;/&#039;);
					$type = &#039;Text equals&#039;;
				}
				$regex[] = [sprintf(&#039;%s &quot;%s&quot;&#039;, $type, $tags), $tags, $i];
				continue;
			}
			foreach ($tags as $tag =&gt; $attributes) {
				$regex[] = [
					sprintf(&#039;Open %s tag&#039;, $tag),
					sprintf(&#039;[\s]*&lt;%s&#039;, preg_quote($tag, &#039;/&#039;)),
					$i
				];
				if ($attributes === true) {
					$attributes = [];
				}
				$attrs = [];
				$explanations = [];

				foreach ($attributes as $attr =&gt; $val) {
					if (is_numeric($attr) &amp;&amp; preg_match(&#039;/^regex\:\/(.+)\/$/i&#039;, $val, $matches)) {
						$attrs[] = $matches[1];
						$explanations[] = sprintf(&#039;Regex &quot;%s&quot; matches&#039;, $matches[1]);
						continue;
					} else {
						$quotes = &#039;&quot;&#039;;

						if (is_numeric($attr)) {
							$attr = $val;
							$val = &#039;.+?&#039;;
							$explanations[] = sprintf(&#039;Attribute &quot;%s&quot; present&#039;, $attr);
						} elseif (
							!empty($val) &amp;&amp; preg_match(&#039;/^regex\:\/(.+)\/$/i&#039;, $val, $matches)
						) {
							$quotes = &#039;&quot;?&#039;;
							$val = $matches[1];
							$explanations[] = sprintf(&#039;Attribute &quot;%s&quot; matches &quot;%s&quot;&#039;, $attr, $val);
						} else {
							$explanations[] = sprintf(&#039;Attribute &quot;%s&quot; == &quot;%s&quot;&#039;, $attr, $val);
							$val = preg_quote($val, &#039;/&#039;);
						}
						$attrs[] = &#039;[\s]+&#039; . preg_quote($attr, &#039;/&#039;) . &quot;={$quotes}{$val}{$quotes}&quot;;
					}
				}
				if ($attrs) {
					$permutations = $this-&gt;_arrayPermute($attrs);
					$permutationTokens = [];
					foreach ($permutations as $permutation) {
						$permutationTokens[] = join(&#039;&#039;, $permutation);
					}
					$regex[] = [
						sprintf(&#039;%s&#039;, join(&#039;, &#039;, $explanations)),
						$permutationTokens,
						$i
					];
				}
				$regex[] = [sprintf(&#039;End %s tag&#039;, $tag), &#039;[\s]*\/?[\s]*&gt;[\n\r]*&#039;, $i];
			}
		}

		foreach ($regex as $i =&gt; $assertation) {
			list($description, $expressions, $itemNum) = $assertation;
			$matches = false;

			foreach ((array) $expressions as $expression) {
				if (preg_match(sprintf(&#039;/^%s/s&#039;, $expression), $string, $match)) {
					$matches = true;
					$string = substr($string, strlen($match[0]));
					break;
				}
			}

			if (!$matches) {
				$this-&gt;assert(false, sprintf(
					&#039;- Item #%d / regex #%d failed: %s&#039;, $itemNum, $i, $description
				));
				return false;
			}
		}
		return $this-&gt;assert(true);
	}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
