<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\action\Controller – Framework API v1.3.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.3.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.3.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.3.x/lithium/action" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">action</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Controller</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.3.x/lithium/action" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::__construct()">__construct()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::_init()">_init()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::__invoke()">__invoke()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::set()">set()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::render()">render()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::redirect()">redirect()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::_stop()">_stop()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::__set_state()">__set_state()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::respondsTo()">respondsTo()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::invokeMethod()">invokeMethod()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_instance()">_instance()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_parents()">_parents()</a>												<li class="method public deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::applyFilter()">applyFilter()</a>												<li class="method protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::_filter()">_filter()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::$request">$request</a>												<li class="property public">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::$response">$response</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::$_render">$_render</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::$_classes">$_classes</a>												<li class="property protected">
				<a href="/docs/api/lithium/1.3.x/lithium/action/Controller::$_autoConfig">$_autoConfig</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_config">$_config</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_parents">$_parents</a>												<li class="property protected deprecated inherited">
				<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated::$_methodFilters">$_methodFilters</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.3.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.3.x/lithium/action" class="symbol-segment">action</a>\Controller		</h1>

		<section class="under">
														<div class="extends">
					<span class="extends__title">Uses</span>
											<a href="/docs/api/lithium/1.3.x/lithium/core/MergeInheritable" class="extends__symbol">lithium\core\MergeInheritable</a>									</div>
														<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.3.x/lithium/core/ObjectDeprecated" class="extends__symbol">lithium\core\ObjectDeprecated</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>The <code>Controller</code> class is the fundamental building block of your application's request/response
cycle. Controllers are organized around a single logical entity, usually one or more model
classes (i.e. <code>lithium\data\Model</code>) and are tasked with performing operations against that
entity.</p>
					</div>
				
									<div class="description">
						<p>Each controller has a series of 'actions' which are defined as class methods of the <code>Controller</code>
classes. Each action has a specific responsibility, such as listing a set of objects, updating an
object, or deleting an object.</p>
<p>A controller object is instantiated by the <code>Dispatcher</code> (<code>lithium\action\Dispatcher</code>), and is
given an instance of the <code>lithium\action\Request</code> class, which contains all necessary request
state, including routing information, <code>GET</code> &amp; <code>POST</code> data, and server variables. The controller
is then invoked (using PHP's magic <code>__invoke()</code> syntax), and the proper action is called,
according to the routing information stored in the <code>Request</code> object.</p>
<p>A controller then returns a response (i.e. using <code>redirect()</code> or <code>render()</code>) which includes HTTP
headers, and/or a serialized data response (JSON or XML, etc.) or HTML webpage.</p>
<p>For more information on returning serialized data responses for web services, or manipulating
template rendering from within your controllers, see the settings in <code>$_render</code> and the
<code>lithium\net\http\Media</code> class.</p>
					</div>
							</section>

			
			
			
						<section id="related">
				<h3 class="h-beta">Related</h3>
				<ul class="related">
									<li><a href="/docs/api/lithium/1.3.x/lithium/net/http/Media">lithium\net\http\Media</a>									<li><a href="/docs/api/lithium/1.3.x/lithium/action/Dispatcher">lithium\action\Dispatcher</a>									<li><a href="/docs/api/lithium/1.3.x/lithium/action/Controller::$_render">lithium\action\Controller::$_render</a>								</ul>
			</section>
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class Controller extends \lithium\core\ObjectDeprecated {

	use \lithium\core\MergeInheritable;

	/**
	 * Contains an instance of the `Request` object with all the details of the HTTP request that
	 * was dispatched to the controller object. Any parameters captured in routing, such as
	 * controller or action name are accessible as properties of this object, i.e.
	 * `$this-&gt;request-&gt;controller` or `$this-&gt;request-&gt;action`.
	 *
	 * @see lithium\action\Request
	 * @var object
	 */
	public $request = null;

	/**
	 * Contains an instance of the `Response` object which aggregates the headers and body content
	 * to be written back to the client (browser) when the result of the request is rendered.
	 *
	 * @see lithium\action\Response
	 * @var object
	 */
	public $response = null;

	/**
	 * Lists the rendering control options for responses generated by this controller.
	 *
	 * - The `&#039;type&#039;` key is the content type that will be rendered by default, unless another is
	 *   explicitly specified (defaults to `&#039;html&#039;`).
	 * - The `&#039;data&#039;` key contains an associative array of variables to be sent to the view,
	 *   including any variables created in `set()`, or if an action returns any variables (as an
	 *   associative array).
	 * - When an action is invoked, it will by default attempt to render a response, set the
	 *   `&#039;auto&#039;` key to `false` to prevent this behavior.
	 * - If you manually call `render()` within an action, the `&#039;hasRendered&#039;` key stores this
	 *   state, so that responses are not rendered multiple times, either manually or automatically.
	 * - The `&#039;layout&#039;` key specifies the name of the layout to be used (defaults to `&#039;default&#039;`).
	 *   Typically, layout files are looked up as
	 *   `&lt;app-path&gt;/views/layouts/&lt;layout-name&gt;.&lt;type&gt;.php`. Based on the default settings, the
	 *   actual path would be `path-to-app/views/layouts/default.html.php`.
	 * - Though typically introspected from the action that is executed, the `&#039;template&#039;` key can be
	 *   manually specified. This sets the template to be rendered, and is looked up (by default) as
	 *   `&lt;app-path&gt;/views/&lt;controller&gt;/&lt;action&gt;.&lt;type&gt;.php`, i.e.:
	 *   `path-to-app/views/posts/index.html.php`.
	 * - To enable automatic content-type negotiation (i.e. determining the content type of the
	 *   response based on the value of the
	 *   [HTTP Accept header](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)), set the
	 *   `&#039;negotiate&#039;` flag to `true`. Otherwise, the response will only be based on the `type`
	 *   parameter of the request object (defaulting to `&#039;html&#039;` if no type is present in the
	 *   `Request` parameters).
	 *
	 * Keep in mind that most of these settings may be passed to `Controller::render()` as well. To
	 * change how these settings operate (i.e. template paths, default render settings for
	 * individual media types), see the `Media` class.
	 *
	 * @var array
	 * @see lithium\action\Controller::render()
	 * @see lithium\net\http\Media::type()
	 * @see lithium\net\http\Media::render()
	 */
	protected $_render = [
		&#039;type&#039;        =&gt; null,
		&#039;data&#039;        =&gt; [],
		&#039;auto&#039;        =&gt; true,
		&#039;layout&#039;      =&gt; &#039;default&#039;,
		&#039;template&#039;    =&gt; null,
		&#039;hasRendered&#039; =&gt; false,
		&#039;negotiate&#039;   =&gt; false
	];

	/**
	 * Lists `Controller`&#039;s class dependencies. For details on extending or replacing a class,
	 * please refer to that class&#039;s API.
	 *
	 * @var array
	 */
	protected $_classes = [
		&#039;media&#039; =&gt; &#039;lithium\net\http\Media&#039;,
		&#039;router&#039; =&gt; &#039;lithium\net\http\Router&#039;,
		&#039;response&#039; =&gt; &#039;lithium\action\Response&#039;
	];

	/**
	 * Auto configuration properties.
	 *
	 * @var array
	 */
	protected $_autoConfig = [&#039;render&#039; =&gt; &#039;merge&#039;, &#039;classes&#039; =&gt; &#039;merge&#039;];

	/**
	 * Constructor.
	 *
	 * @see lithium\action\Controller::$request
	 * @see lithium\action\Controller::$response
	 * @see lithium\action\Controller::$_render
	 * @see lithium\action\Controller::$_classes
	 * @param array $config Available configuration options are:
	 *        - `&#039;request&#039;` _object|null_: Either a request object or `null`.
	 *        - `&#039;response&#039;` _array_: Options for constructing the response object.
	 *        - `&#039;render&#039;` _array_: Rendering control options.
	 *        - `&#039;classes&#039;` _array_
	 * @return void
	 */
	public function __construct(array $config = []) {
		$defaults = [
			&#039;request&#039; =&gt; null,
			&#039;response&#039; =&gt; [],
			&#039;render&#039; =&gt; [],
			&#039;classes&#039; =&gt; []
		];
		parent::__construct($config + $defaults);
	}

	/**
	 * Populates the `$response` property with a new instance of the `Response` class passing it
	 * configuration, and sets some rendering options, depending on the incoming request.
	 *
	 * @return void
	 */
	protected function _init() {
		parent::_init();

		$this-&gt;_inherit([&#039;_render&#039;]);

		$this-&gt;request = $this-&gt;request ?: $this-&gt;_config[&#039;request&#039;];
		$this-&gt;response = Libraries::instance(
			null, &#039;response&#039;, $this-&gt;_config[&#039;response&#039;], $this-&gt;_classes
		);

		if (!$this-&gt;request || $this-&gt;_render[&#039;type&#039;]) {
			return;
		}
		if ($this-&gt;_render[&#039;negotiate&#039;]) {
			$this-&gt;_render[&#039;type&#039;] = $this-&gt;request-&gt;accepts();
			return;
		}
		$this-&gt;_render[&#039;type&#039;] = $this-&gt;request-&gt;get(&#039;params:type&#039;) ?: &#039;html&#039;;
	}

	/**
	 * Called by the Dispatcher class to invoke an action.
	 *
	 * @param object $request The request object with URL and HTTP info for dispatching this action.
	 * @param array $dispatchParams The array of parameters that will be passed to the action.
	 * @param array $options The dispatch options for this action.
	 * @return object Returns the response object associated with this controller.
	 * @filter Filter to execute logic before an action is invoked (i.e. custom access
	 *         control) or after it has been called and has returned its response (i.e.
	 *         for caching it).
	 */
	public function __invoke($request, $dispatchParams, array $options = []) {
		$params = compact(&#039;request&#039;, &#039;dispatchParams&#039;, &#039;options&#039;);

		return Filters::run($this, __FUNCTION__, $params, function($params) {
			$dispatchParams = $params[&#039;dispatchParams&#039;];

			$action = isset($dispatchParams[&#039;action&#039;]) ? $dispatchParams[&#039;action&#039;] : &#039;index&#039;;
			$args = isset($dispatchParams[&#039;args&#039;]) ? $dispatchParams[&#039;args&#039;] : [];

			if (substr($action, 0, 1) === &#039;_&#039; || method_exists(__CLASS__, $action)) {
				throw new DispatchException(&#039;Attempted to invoke a private method.&#039;);
			}
			if (!method_exists($this, $action)) {
				throw new DispatchException(&quot;Action `{$action}` not found.&quot;);
			}
			$this-&gt;_render[&#039;template&#039;] = $this-&gt;_render[&#039;template&#039;] ?: $action;

			if ($result = call_user_func_array(array($this, $action), $args)) {
				if (is_string($result)) {
					$this-&gt;render([&#039;text&#039; =&gt; $result]);
					return $this-&gt;response;
				}
				if (is_array($result)) {
					$this-&gt;set($result);
				}
			}

			if (!$this-&gt;_render[&#039;hasRendered&#039;] &amp;&amp; $this-&gt;_render[&#039;auto&#039;]) {
				$this-&gt;render();
			}
			return $this-&gt;response;
		});
	}

	/**
	 * This method is used to pass along any data from the controller to the view and layout
	 *
	 * @param array $data sets of `&lt;variable name&gt; =&gt; &lt;variable value&gt;` to pass to view layer.
	 * @return void
	 */
	public function set($data = []) {
		$this-&gt;_render[&#039;data&#039;] = (array) $data + $this-&gt;_render[&#039;data&#039;];
	}

	/**
	 * Uses results (typically coming from a controller action) to generate content and headers for
	 * a `Response` object.
	 *
	 * @see lithium\action\Controller::$_render
	 * @param array $options An array of options, as follows:
	 *        - `&#039;data&#039;`: An associative array of variables to be assigned to the template. These
	 *          are merged on top of any variables set in `Controller::set()`.
	 *        - `&#039;head&#039;`: If true, only renders the headers of the response, not the body. Defaults
	 *          to `false`.
	 *        - `&#039;template&#039;`: The name of a template, which usually matches the name of the action.
	 *          By default, this template is looked for in the views directory of the current
	 *          controller, i.e. given a `PostsController` object, if template is set to `&#039;view&#039;`,
	 *          the template path would be `views/posts/view.html.php`. Defaults to the name of the
	 *          action being rendered.
	 *          The options specified here are merged with the values in the `Controller::$_render`
	 *          property. You may refer to it for other options accepted by this method.
	 * @return object Returns the `Response` object associated with this `Controller` instance.
	 */
	public function render(array $options = []) {
		$media = $this-&gt;_classes[&#039;media&#039;];
		$class = get_class($this);
		$name = preg_replace(&#039;/Controller$/&#039;, &#039;&#039;, substr($class, strrpos($class, &#039;\\&#039;) + 1));
		$key = key($options);

		if (isset($options[&#039;data&#039;])) {
			$this-&gt;set($options[&#039;data&#039;]);
			unset($options[&#039;data&#039;]);
		}
		$defaults = [
			&#039;status&#039;     =&gt; null,
			&#039;location&#039;   =&gt; false,
			&#039;data&#039;       =&gt; null,
			&#039;head&#039;       =&gt; false,
			&#039;controller&#039; =&gt; Inflector::underscore($name),
			&#039;library&#039;    =&gt; Libraries::get($class)
		];

		$options += $this-&gt;_render + $defaults;

		if ($key &amp;&amp; $media::type($key)) {
			$options[&#039;type&#039;] = $key;
			$this-&gt;set($options[$key]);
			unset($options[$key]);
		}

		$this-&gt;_render[&#039;hasRendered&#039;] = true;
		$this-&gt;response-&gt;type($options[&#039;type&#039;]);
		$this-&gt;response-&gt;status($options[&#039;status&#039;]);
		$this-&gt;response-&gt;headers(&#039;Location&#039;, $options[&#039;location&#039;]);

		if ($options[&#039;head&#039;]) {
			return;
		}
		$response = $media::render($this-&gt;response, $this-&gt;_render[&#039;data&#039;], $options + [
			&#039;request&#039; =&gt; $this-&gt;request
		]);
		return ($this-&gt;response = $response ?: $this-&gt;response);
	}

	/**
	 * Creates a redirect response by calling `render()` and providing a `&#039;location&#039;` parameter.
	 *
	 * @see lithium\net\http\Router::match()
	 * @see lithium\action\Controller::$response
	 * @param mixed $url The location to redirect to, provided as a string relative to the root of
	 *              the application, a fully-qualified URL, or an array of routing parameters to be
	 *              resolved to a URL. Post-processed by `Router::match()`.
	 * @param array $options Options when performing the redirect. Available options include:
	 *              - `&#039;status&#039;` _integer_: The HTTP status code associated with the redirect.
	 *                Defaults to `302`.
	 *              - `&#039;head&#039;` _boolean_: Determines whether only headers are returned with the
	 *                response. Defaults to `true`, in which case only headers and no body are
	 *                returned. Set to `false` to render a body as well.
	 *              - `&#039;exit&#039;` _boolean_: Exit immediately after rendering. Defaults to `false`.
	 *                Because `redirect()` does not exit by default, you should always prefix calls
	 *                with a `return` statement, so that the action is always immediately exited.
	 * @return object Returns the instance of the `Response` object associated with this controller.
	 * @filter Allows to intercept redirects, either stopping them completely i.e. during debugging
	 *         or for logging purposes.
	 */
	public function redirect($url, array $options = []) {
		$defaults = [&#039;location&#039; =&gt; null, &#039;status&#039; =&gt; 302, &#039;head&#039; =&gt; true, &#039;exit&#039; =&gt; false];
		$options += $defaults;
		$params = compact(&#039;url&#039;, &#039;options&#039;);

		Filters::run($this, __FUNCTION__, $params, function($params) {
			$router = $this-&gt;_classes[&#039;router&#039;];

			$options = $params[&#039;options&#039;];
			$location = $options[&#039;location&#039;] ?: $router::match($params[&#039;url&#039;], $this-&gt;request);
			$this-&gt;render(compact(&#039;location&#039;) + $options);
		});

		if ($options[&#039;exit&#039;]) {
			$this-&gt;response-&gt;render();
			$this-&gt;_stop();
		}
		return $this-&gt;response;
	}

	/**
	 * Exit immediately. Primarily used for overrides during testing.
	 *
	 * @param integer|string $status integer range 0 to 254, string printed on exit
	 * @return void
	 */
	protected function _stop($status = 0) {
		exit($status);
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
