<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\analysis\Parser – Framework API v1.0.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.0.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.0.x/lithium/analysis" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">analysis</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">Parser</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.0.x/lithium/analysis" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/analysis/Parser::token()">token()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/analysis/Parser::tokenize()">tokenize()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/analysis/Parser::find()">find()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/analysis/Parser::match()">match()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/analysis/Parser::matchToken()">matchToken()</a>												<li class="method protected">
				<a href="/docs/api/lithium/1.0.x/lithium/analysis/Parser::_prepareMatchParams()">_prepareMatchParams()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::applyFilter()">applyFilter()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::invokeMethod()">invokeMethod()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::respondsTo()">respondsTo()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::_instance()">_instance()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::_filter()">_filter()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::_parents()">_parents()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::_stop()">_stop()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::$_methodFilters">$_methodFilters</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject::$_parents">$_parents</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.0.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.0.x/lithium/analysis" class="symbol-segment">analysis</a>\Parser		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.0.x/lithium/core/StaticObject" class="extends__symbol">lithium\core\StaticObject</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>The parser class uses PHP's tokenizer to provide methods and tools for performing static analysis
on PHP code.</p>
					</div>
				
							</section>

			
			
			
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class Parser extends \lithium\core\StaticObject {

	/**
	 * Convenience method to get the token name of a PHP code string. If multiple tokens are
	 * present in the string, only the first is returned.
	 *
	 * @param string $string String of PHP code to get the token name of, i.e. `&#039;=&gt;&#039;` or `&#039;static&#039;`.
	 * @param array $options
	 * @return mixed
	 */
	public static function token($string, array $options = array()) {
		$defaults = array(&#039;id&#039; =&gt; false);
		$options += $defaults;

		if (empty($string) &amp;&amp; $string !== &#039;0&#039;) {
			return false;
		}
		list($token) = static::tokenize($string);
		return $token[($options[&#039;id&#039;]) ? &#039;id&#039; : &#039;name&#039;];
	}

	/**
	 * Splits the provided `$code` into PHP language tokens.
	 *
	 * @param string $code Source code to be tokenized.
	 * @param array $options Options consists of:
	 *        -&#039;wrap&#039;: Boolean indicating whether or not to wrap the supplied
	 *          code in PHP tags.
	 *        -&#039;ignore&#039;: An array containing PHP language tokens to ignore.
	 *        -&#039;include&#039;: If supplied, an array of the only language tokens
	 *         to include in the output.
	 * @return array An array of tokens in the supplied source code.
	 */
	public static function tokenize($code, array $options = array()) {
		$defaults = array(&#039;wrap&#039; =&gt; true, &#039;ignore&#039; =&gt; array(), &#039;include&#039; =&gt; array());
		$options += $defaults;
		$tokens = array();
		$line = 1;

		if ($options[&#039;wrap&#039;]) {
			$code = &quot;&lt;?php {$code}?&gt;&quot;;
		}
		foreach (token_get_all($code) as $token) {
			$token = (isset($token[1])) ? $token : array(null, $token, $line);
			list($id, $content, $line) = $token;
			$name = $id ? token_name($id) : $content;

			if (!empty($options[&#039;include&#039;])) {
				if (!in_array($name, $options[&#039;include&#039;]) &amp;&amp; !in_array($id, $options[&#039;include&#039;])) {
					continue;
				}
			}

			if (!empty($options[&#039;ignore&#039;])) {
				if (in_array($name, $options[&#039;ignore&#039;]) || in_array($id, $options[&#039;ignore&#039;])) {
					continue;
				}
			}
			$tokens[] = array(&#039;id&#039; =&gt; $id, &#039;name&#039; =&gt; $name, &#039;content&#039; =&gt; $content, &#039;line&#039; =&gt; $line);

			$line += count(preg_split(&#039;/\r\n|\r|\n/&#039;, $content)) - 1;
		}

		if ($options[&#039;wrap&#039;] &amp;&amp; empty($options[&#039;include&#039;])) {
			$tokens = array_slice($tokens, 1, count($tokens) - 2);
		}
		return $tokens;
	}

	/**
	 * Finds a pattern in a block of code.
	 *
	 * @param string $code
	 * @param string $pattern
	 * @param array $options The list of options to be used when parsing / matching `$code`:
	 *              - &#039;ignore&#039;: An array of token names to ignore while parsing, defaults to
	 *               `array(&#039;T_WHITESPACE&#039;)`
	 *              - &#039;lineBreaks&#039;: If true, all tokens in a single pattern match must appear on the
	 *                same line of code, defaults to false
	 *              - &#039;startOfLine&#039;: If true, the pattern must match starting with the beginning of
	 *                the line of code to be matched, defaults to false
	 * @return array
	 */
	public static function find($code, $pattern, array $options = array()) {
		$defaults = array(
			&#039;all&#039; =&gt; true, &#039;capture&#039; =&gt; array(), &#039;ignore&#039; =&gt; array(&#039;T_WHITESPACE&#039;),
			&#039;return&#039; =&gt; true, &#039;lineBreaks&#039; =&gt; false, &#039;startOfLine&#039; =&gt; false
		);
		$options += $defaults;
		$results = array();
		$matches = array();
		$patternMatch = array();
		$ret = $options[&#039;return&#039;];

		$tokens = new Collection(array(&#039;data&#039; =&gt; static::tokenize($code, $options)));
		$pattern = new Collection(array(&#039;data&#039; =&gt; static::tokenize($pattern, $options)));

		$breaks = function($token) use (&amp;$tokens, &amp;$matches, &amp;$patternMatch, $options) {
			if (!$options[&#039;lineBreaks&#039;]) {
				return true;
			}
			if (empty($patternMatch) &amp;&amp; !$options[&#039;startOfLine&#039;]) {
				return true;
			}

			if (empty($patternMatch)) {
				$prev = $tokens-&gt;prev();
				$tokens-&gt;next();
			} else {
				$prev = reset($patternMatch);
			}

			if (empty($patternMatch) &amp;&amp; $options[&#039;startOfLine&#039;]) {
				return ($token[&#039;line&#039;] &gt; $prev[&#039;line&#039;]);
			}
			return ($token[&#039;line&#039;] === $prev[&#039;line&#039;]);
		};

		$capture = function($token) use (&amp;$matches, &amp;$patternMatch, $tokens, $breaks, $options) {
			if ($token === null) {
				$matches = $patternMatch = array();
				return false;
			}

			if (empty($patternMatch)) {
				$prev = $tokens-&gt;prev();
				$tokens-&gt;next();
				if ($options[&#039;startOfLine&#039;] &amp;&amp; $token[&#039;line&#039;] === $prev[&#039;line&#039;]) {
					$patternMatch = $matches = array();
					return false;
				}
			}
			$patternMatch[] = $token;

			if (empty($options[&#039;capture&#039;]) || !in_array($token[&#039;name&#039;], $options[&#039;capture&#039;])) {
				return true;
			}
			if (!$breaks($token)) {
				$matches = array();
				return true;
			}
			$matches[] = $token;
			return true;
		};

		$executors = array(
			&#039;*&#039; =&gt; function(&amp;$tokens, &amp;$pattern) use ($options, $capture) {
				$closing = $pattern-&gt;next();
				$tokens-&gt;prev();

				while (($t = $tokens-&gt;next()) &amp;&amp; !Parser::matchToken($closing, $t)) {
					$capture($t);
				}
				$pattern-&gt;next();
			}
		);

		$tokens-&gt;rewind();
		$pattern-&gt;rewind();

		while ($tokens-&gt;valid()) {
			if (!$pattern-&gt;valid()) {
				$pattern-&gt;rewind();

				if (!empty($matches)) {
					$results[] = array_map(
						function($i) use ($ret) { return isset($i[$ret]) ? $i[$ret] : $i; },
						$matches
					);
				}
				$capture(null);
			}

			$p = $pattern-&gt;current();
			$t = $tokens-&gt;current();

			switch (true) {
				case (static::matchToken($p, $t)):
					$capture($t) ? $pattern-&gt;next() : $pattern-&gt;rewind();
				break;
				case (isset($executors[$p[&#039;name&#039;]])):
					$exec = $executors[$p[&#039;name&#039;]];
					$exec($tokens, $pattern);
				break;
				default:
					$capture(null);
					$pattern-&gt;rewind();
				break;
			}
			$tokens-&gt;next();
		}
		return $results;
	}

	/**
	 * Token pattern matching.
	 *
	 * @param string $code Source code to be analyzed.
	 * @param string $parameters An array containing token patterns to be matched.
	 * @param array $options The list of options to be used when matching `$code`:
	 *              - &#039;ignore&#039;: An array of language tokens to ignore.
	 *              - &#039;return&#039;: If set to &#039;content&#039; returns an array of matching tokens.
	 * @return array Array of matching tokens.
	 */
	public static function match($code, $parameters, array $options = array()) {
		$defaults = array(&#039;ignore&#039; =&gt; array(&#039;T_WHITESPACE&#039;), &#039;return&#039; =&gt; true);
		$options += $defaults;
		$parameters = static::_prepareMatchParams($parameters);

		$tokens = is_array($code) ? $code : static::tokenize($code, $options);
		$results = array();

		foreach ($tokens as $i =&gt; $token) {
			if (!array_key_exists($token[&#039;name&#039;], $parameters)) {
				if (!in_array(&#039;*&#039;, $parameters)) {
					continue;
				}
			}
			$param = $parameters[$token[&#039;name&#039;]];

			if (isset($param[&#039;before&#039;]) &amp;&amp; $i &gt; 0) {
				if (!in_array($tokens[$i - 1][&#039;name&#039;], (array) $param[&#039;before&#039;])) {
					continue;
				}
			}

			if (isset($param[&#039;after&#039;]) &amp;&amp; $i + 1 &lt; count($tokens)) {
				 if (!in_array($tokens[$i + 1][&#039;name&#039;], (array) $param[&#039;after&#039;])) {
					continue;
				}
			}
			$results[] = isset($token[$options[&#039;return&#039;]]) ? $token[$options[&#039;return&#039;]] : $token;
		}
		return $results;
	}

	/**
	 * Compares two PHP language tokens.
	 *
	 * @param array $pattern Pattern token.
	 * @param array $token Token to be compared.
	 * @return boolean Match result.
	 */
	public static function matchToken($pattern, $token) {
		if ($pattern[&#039;name&#039;] !== $token[&#039;name&#039;]) {
			return false;
		}

		if (!isset($pattern[&#039;content&#039;])) {
			return true;
		}

		$match = $pattern[&#039;content&#039;];
		$content = $token[&#039;content&#039;];

		if ($pattern[&#039;name&#039;] === &#039;T_VARIABLE&#039;) {
			$match = substr($match, 1);
			$content = substr($content, 1);
		}

		switch (true) {
			case ($match === &#039;_&#039; || $match === $content):
				return true;
		}
		return false;
	}

	/**
	 * Helper function to normalize parameters for token matching.
	 *
	 * @see lithium\analysis\Parser::match()
	 * @param array|string $parameters Params to be normalized.
	 * @return array Normalized parameters.
	 */
	protected static function _prepareMatchParams($parameters) {
		foreach (Set::normalize($parameters) as $token =&gt; $scope) {
			if (strpos($token, &#039;T_&#039;) !== 0) {
				unset($parameters[$token]);

				foreach (array(&#039;before&#039;, &#039;after&#039;) as $key) {
					if (!isset($scope[$key])) {
						continue;
					}
					$items = array();

					foreach ((array) $scope[$key] as $item) {
						$items[] = (strpos($item, &#039;T_&#039;) !== 0)  ? static::token($item) : $item;
					}
					$scope[$key] = $items;
				}
				$parameters[static::token($token)] = $scope;
			}
		}
		return $parameters;
	}
}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
