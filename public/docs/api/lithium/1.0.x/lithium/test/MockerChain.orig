<!doctype html>
<html lang="en">
<head>
	<meta charset="UTF-8" />	<title>lithium\test\MockerChain – Framework API v1.0.x – Documentation – li3 PHP-Framework</title>
		<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/reset.css" />
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous+Pro:400,700,400italic,700italic" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/u1m.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/li3_docs.css" />
	<link rel="stylesheet" href="/assets/v:__PROJECT_VERSION_BUILD__xyzz/css/highlight.css" />
	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
	<script src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/js/base.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js"></script>
	
	
	<link rel="icon" href="/assets/ico/site.png">

		<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-11048416-4', 'auto');
	  ga('send', 'pageview');
	</script>
	</head>
<body class="layout-default li3-docs">
		<div id="container">
			<header class="main">
	<div class="left">
		<h1><a href="/" class="li3-logo">li3</a></h1>
	</div>
	<div class="right">
		<nav class="main-nav"><a href="http://news.li3.me">News</a><a href="/docs" class="active">Documentation</a><a href="/versions">Versions</a><a href="/present">Presentations</a><a href="/support">Community</a><a href="/development">Development</a></nav>	</div>
</header>							<nav class="crumbs">
	<ul itemscope itemtype="http://schema.org/BreadcrumbList">
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="1" />
							<a href="/docs" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Documentation</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="2" />
							<a href="/docs/api/lithium/1.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">Framework API (1.0.x)</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="3" />
							<a href="/docs/api/lithium/1.0.x/lithium" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">lithium</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="4" />
							<a href="/docs/api/lithium/1.0.x/lithium/test" itemscope itemprop="item" itemtype="http://schema.org/Thing"><span itemprop="name">test</span></a>
					</li>
			<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
			<meta itemprop="position" content="5" />
							<span itemscope itemprop="item" itemtype="http://schema.org/Thing">
					<span itemprop="name">MockerChain</span>
				</span>
					</li>
		</ul>
</nav>						<div id="content">
				<article class="apis-view has-aside-right">

	<nav class="aside aside-right">
			<h3 class="h-gamma">Contents</h3>
		<ul>
			<li class="nav-up"><a href="/docs/api/lithium/1.0.x/lithium/test" rel="up">../</a>		</ul>
	
													
						<h3 class="h-gamma">Methods</h3>
			<ul>
												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::__construct()">__construct()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::__call()">__call()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::respondsTo()">respondsTo()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::called()">called()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::with()">with()</a>												<li class="method public">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::success()">success()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_init()">_init()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::applyFilter()">applyFilter()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::invokeMethod()">invokeMethod()</a>												<li class="method public inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::__set_state()">__set_state()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_instance()">_instance()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_filter()">_filter()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_parents()">_parents()</a>												<li class="method protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::_stop()">_stop()</a>							</ul>
								<h3 class="h-gamma">Properties</h3>
			<ul>
												<li class="property protected">
				<a href="/docs/api/lithium/1.0.x/lithium/test/MockerChain::$_data">$_data</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_config">$_config</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_autoConfig">$_autoConfig</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_methodFilters">$_methodFilters</a>												<li class="property protected inherited">
				<a href="/docs/api/lithium/1.0.x/lithium/core/Object::$_parents">$_parents</a>							</ul>
						</nav>
	<div class="body">
			<h1 class="h-alpha">
		<a href="/docs/api/lithium/1.0.x/lithium" class="symbol-segment">lithium</a>\<a href="/docs/api/lithium/1.0.x/lithium/test" class="symbol-segment">test</a>\MockerChain		</h1>

		<section class="under">
													<div class="extends">
					<span class="extends__title">Extends</span>
											<a href="/docs/api/lithium/1.0.x/lithium/core/Object" class="extends__symbol">lithium\core\Object</a>									</div>
									<div class="tags">
																<span class="tag">class</span>
			</div>
		</section>

					
			<section>
									<div class="summary">
						<p>Mocker chain is used to aid in assertion of method calls.</p>
					</div>
				
									<div class="description">
						<p>Asserting if <code>method1</code> was not called</p>
<pre><code class="language-php">$mock = new \lithium\tests\mocks\test\mockStdClass\Mock();
$this-&gt;assertFalse(Mocker::chain($mock)-&gt;called('method1')-&gt;success());
</code></pre>
<p>Asserting if <code>method1</code> was called 2 times</p>
<pre><code class="language-php">$mock = new \lithium\tests\mocks\test\mockStdClass\Mock();
$this-&gt;assertTrue(Mocker::chain($mock)-&gt;called('method1')-&gt;eq(2)-&gt;success());
</code></pre>
<p>Asserting if <code>method2</code> was called after <code>method1</code></p>
<pre><code class="language-php">$mock = new \lithium\tests\mocks\test\mockStdClass\Mock();
$this-&gt;assertTrue(Mocker::chain($mock)-&gt;called('method1')-&gt;called('method2')-&gt;success());
</code></pre>
<p>Asserting if <code>method2</code> was called after <code>method1</code>, and <code>method2</code> had specific arguments.</p>
<pre><code class="language-php">$mock = new \lithium\tests\mocks\test\mockStdClass\Mock();
$this-&gt;assertTrue(Mocker::chain($mock)
	-&gt;called('method1')
	-&gt;called('method2')-&gt;with('foo', 'bar')
		-&gt;success());
</code></pre>
					</div>
							</section>

			
			
			
			
			
			
						<section id="source" class="section">
				<h3 class="h-beta">Source</h3>
				<div id="source" class="source-display">
					<div class="source-wrapper">
						<pre class="source-code"><code class="language-php">class MockerChain extends \lithium\core\Object {

	/**
	 * Data to be used in the class.
	 *
	 * `results` Cached mock results
	 * `method` Method we are asserting
	 * `args` Args we are asserting
	 * `success` Success flag
	 * `callTime` Last method call
	 *
	 * @var array
	 */
	protected $_data = array(
		&#039;results&#039; =&gt; null,
		&#039;method&#039; =&gt; false,
		&#039;args&#039; =&gt; false,
		&#039;success&#039; =&gt; true,
		&#039;callTime&#039; =&gt; 0,
	);

	/**
	 * Constructor. Saves the results from the mock.
	 *
	 * @param array $results Results from the mock
	 * @return void
	 */
	public function __construct($results) {
		$this-&gt;_data[&#039;results&#039;] = $results;
	}

	/**
	 * Validates that a given methodis called a set number of times.
	 *
	 * @param  string $comparison Comparison type &#039;gt&#039;, &#039;gte&#039;, &#039;lt&#039;, &#039;lte&#039;, or &#039;eq&#039;.
	 * @param  array  $args       The first argument is the expected result.
	 * @return object
	 */
	public function __call($comparison, $args) {
		$methodExists = in_array($comparison, array(&#039;gt&#039;, &#039;gte&#039;, &#039;lt&#039;, &#039;lte&#039;, &#039;eq&#039;), true);
		if (!$this-&gt;_data[&#039;success&#039;] || !$methodExists) {
			return $this;
		}
		if (count($args) === 0 || !is_int($args[0])) {
			$this-&gt;_data[&#039;success&#039;] = false;
			return $this;
		}
		$result = 0;
		$expected = $args[0];
		$method = $this-&gt;_data[&#039;method&#039;];
		$args = $this-&gt;_data[&#039;args&#039;];
		foreach ($this-&gt;_data[&#039;results&#039;][$method] as $call) {
			$correctTime = $this-&gt;_data[&#039;callTime&#039;] &lt;= $call[&#039;time&#039;];
			$correctArgs = !is_array($args) || $args === $call[&#039;args&#039;];
			if ($correctTime &amp;&amp; $correctArgs) {
				$this-&gt;_data[&#039;callTime&#039;] = $call[&#039;time&#039;];
				$result++;
			}
		}
		switch ($comparison) {
			case &#039;gt&#039;:
				$this-&gt;_data[&#039;success&#039;] = $result &gt; $expected;
			break;
			case &#039;gte&#039;:
				$this-&gt;_data[&#039;success&#039;] = $result &gt;= $expected;
			break;
			case &#039;lt&#039;:
				$this-&gt;_data[&#039;success&#039;] = $result &lt; $expected;
			break;
			case &#039;lte&#039;:
				$this-&gt;_data[&#039;success&#039;] = $result &lt;= $expected;
			break;
			case &#039;eq&#039;:
				$this-&gt;_data[&#039;success&#039;] = $result === $expected;
			break;
		}
		return $this;
	}

	/**
	 * Determines if a given method can be called.
	 *
	 * @param string $method Name of the method.
	 * @param boolean $internal Provide `true` to perform check from inside the
	 *                class/object. When `false` checks also for public visibility;
	 *                defaults to `false`.
	 * @return boolean Returns `true` if the method can be called, `false` otherwise.
	 */
	public function respondsTo($method, $internal = false) {
		$methodExists = in_array($method, array(&#039;gt&#039;, &#039;gte&#039;, &#039;lt&#039;, &#039;lte&#039;, &#039;eq&#039;), true);
		return $methodExists || parent::respondsTo($method, $internal);
	}

	/**
	 * Valides the method was called after the last call.
	 *
	 * @param  string $method Method to assert
	 * @return object
	 */
	public function called($method) {
		if (!$this-&gt;_data[&#039;success&#039;]) {
			return $this;
		}

		$this-&gt;_data[&#039;method&#039;] = $method;
		$this-&gt;_data[&#039;args&#039;] = false;
		if (!isset($this-&gt;_data[&#039;results&#039;][$method])) {
			$this-&gt;_data[&#039;success&#039;] = false;
			return $this;
		}

		foreach ($this-&gt;_data[&#039;results&#039;][$method] as $call) {
			if ($this-&gt;_data[&#039;callTime&#039;] &lt; $call[&#039;time&#039;]) {
				$this-&gt;_data[&#039;callTime&#039;] = $call[&#039;time&#039;];
				return $this;
			}
		}

		$this-&gt;_data[&#039;success&#039;] = false;
		return $this;
	}

	/**
	 * Will further narrow down the original &#039;called&#039; method.
	 *
	 * Valides the cached method name was called with these args
	 *
	 * @param  mixed $arg,... Optional arguments to test against
	 * @return object
	 */
	public function with() {
		if (!$this-&gt;_data[&#039;success&#039;]) {
			return $this;
		}

		$method = $this-&gt;_data[&#039;method&#039;];
		$this-&gt;_data[&#039;args&#039;] = $args = func_get_args();

		foreach ($this-&gt;_data[&#039;results&#039;][$method] as $call) {
			$correctTime = $this-&gt;_data[&#039;callTime&#039;] &lt;= $call[&#039;time&#039;];
			$correctArgs = $args === $call[&#039;args&#039;];
			if ($correctTime &amp;&amp; $correctArgs) {
				$this-&gt;_data[&#039;callTime&#039;] = $call[&#039;time&#039;];
				return $this;
			}
		}

		$this-&gt;_data[&#039;success&#039;] = false;
		return $this;
	}

	/**
	 * Gives back the success flag
	 *
	 * @return bool
	 */
	public function success() {
		$success = $this-&gt;_data[&#039;success&#039;];
		$this-&gt;_data = array(
			&#039;results&#039; =&gt; $this-&gt;_data[&#039;results&#039;],
			&#039;method&#039; =&gt; false,
			&#039;args&#039; =&gt; false,
			&#039;success&#039; =&gt; true,
			&#039;callTime&#039; =&gt; 0,
		);
		return $success;
	}

}</code></pre>
					</div>
				</div>
			</section>
							</div>
	</article>			</div>
		</div>
		<footer class="main">
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>
	<div class="area"></div>

	<div class="social">
		<a href="https://github.com/unionofrad" target="new">GitHub</a>		<span class="separator">/</span>
		<a href="https://twitter.com/unionofrad" target="new">Twitter</a>		<span class="separator">/</span>
		<a href="http://www.reddit.com/r/li3" target="new">Reddit</a>		<span class="separator">/</span>
		<a href="https://stackoverflow.com/questions/tagged/lithium" target="new">Stack Overflow</a>	</div>
	<div class="testimonial">
		<img src="/assets/v:__PROJECT_VERSION_BUILD__xyzz/img/testimonials/10.png" alt="Testimonial Image" />		<p>I think it's time you started<br />
writing better code.</p>
	</div>
	<div class="copyright">
		Pretty much everything is (c) 2009-2024 and beyond, the <a href="http://unionofrad.org">Union of RAD</a>.	</div>
</footer>	</body>
</body>
</html>
